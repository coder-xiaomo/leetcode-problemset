{
    "data": {
        "question": {
            "questionId": "2169",
            "questionFrontendId": "2043",
            "boundTopicId": null,
            "title": "Simple Bank System",
            "titleSlug": "simple-bank-system",
            "content": "<p>You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has <code>n</code> accounts numbered from <code>1</code> to <code>n</code>. The initial balance of each account is stored in a <strong>0-indexed</strong> integer array <code>balance</code>, with the <code>(i + 1)<sup>th</sup></code> account having an initial balance of <code>balance[i]</code>.</p>\n\n<p>Execute all the <strong>valid</strong> transactions. A transaction is <strong>valid</strong> if:</p>\n\n<ul>\n\t<li>The given account number(s) are between <code>1</code> and <code>n</code>, and</li>\n\t<li>The amount of money withdrawn or transferred from is <strong>less than or equal</strong> to the balance of the account.</li>\n</ul>\n\n<p>Implement the <code>Bank</code> class:</p>\n\n<ul>\n\t<li><code>Bank(long[] balance)</code> Initializes the object with the <strong>0-indexed</strong> integer array <code>balance</code>.</li>\n\t<li><code>boolean transfer(int account1, int account2, long money)</code> Transfers <code>money</code> dollars from the account numbered <code>account1</code> to the account numbered <code>account2</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li>\n\t<li><code>boolean deposit(int account, long money)</code> Deposit <code>money</code> dollars into the account numbered <code>account</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li>\n\t<li><code>boolean withdraw(int account, long money)</code> Withdraw <code>money</code> dollars from the account numbered <code>account</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Bank&quot;, &quot;withdraw&quot;, &quot;transfer&quot;, &quot;deposit&quot;, &quot;transfer&quot;, &quot;withdraw&quot;]\n[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]\n<strong>Output</strong>\n[null, true, true, true, false, false]\n\n<strong>Explanation</strong>\nBank bank = new Bank([10, 100, 20, 50, 30]);\nbank.withdraw(3, 10);    // return true, account 3 has a balance of $20, so it is valid to withdraw $10.\n                         // Account 3 has $20 - $10 = $10.\nbank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.\n                         // Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.\nbank.deposit(5, 20);     // return true, it is valid to deposit $20 to account 5.\n                         // Account 5 has $10 + $20 = $30.\nbank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,\n                         // so it is invalid to transfer $15 from it.\nbank.withdraw(10, 50);   // return false, it is invalid because account 10 does not exist.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == balance.length</code></li>\n\t<li><code>1 &lt;= n, account, account1, account2 &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= balance[i], money &lt;= 10<sup>12</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <strong>each</strong> function <code>transfer</code>, <code>deposit</code>, <code>withdraw</code>.</li>\n</ul>\n",
            "translatedTitle": null,
            "translatedContent": null,
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 225,
            "dislikes": 202,
            "isLiked": null,
            "similarQuestions": "[{\"title\": \"Design an ATM Machine\", \"titleSlug\": \"design-an-atm-machine\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "exampleTestcases": "[\"Bank\",\"withdraw\",\"transfer\",\"deposit\",\"transfer\",\"withdraw\"]\n[[[10,100,20,50,30]],[3,10],[5,1,20],[5,20],[3,4,15],[10,50]]",
            "categoryTitle": "Algorithms",
            "contributors": [],
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Design",
                    "slug": "design",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                }
            ],
            "companyTagStats": null,
            "codeSnippets": [
                {
                    "lang": "C++",
                    "langSlug": "cpp",
                    "code": "class Bank {\npublic:\n    Bank(vector<long long>& balance) {\n        \n    }\n    \n    bool transfer(int account1, int account2, long long money) {\n        \n    }\n    \n    bool deposit(int account, long long money) {\n        \n    }\n    \n    bool withdraw(int account, long long money) {\n        \n    }\n};\n\n/**\n * Your Bank object will be instantiated and called as such:\n * Bank* obj = new Bank(balance);\n * bool param_1 = obj->transfer(account1,account2,money);\n * bool param_2 = obj->deposit(account,money);\n * bool param_3 = obj->withdraw(account,money);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Java",
                    "langSlug": "java",
                    "code": "class Bank {\n\n    public Bank(long[] balance) {\n        \n    }\n    \n    public boolean transfer(int account1, int account2, long money) {\n        \n    }\n    \n    public boolean deposit(int account, long money) {\n        \n    }\n    \n    public boolean withdraw(int account, long money) {\n        \n    }\n}\n\n/**\n * Your Bank object will be instantiated and called as such:\n * Bank obj = new Bank(balance);\n * boolean param_1 = obj.transfer(account1,account2,money);\n * boolean param_2 = obj.deposit(account,money);\n * boolean param_3 = obj.withdraw(account,money);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Python",
                    "langSlug": "python",
                    "code": "class Bank(object):\n\n    def __init__(self, balance):\n        \"\"\"\n        :type balance: List[int]\n        \"\"\"\n        \n\n    def transfer(self, account1, account2, money):\n        \"\"\"\n        :type account1: int\n        :type account2: int\n        :type money: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def deposit(self, account, money):\n        \"\"\"\n        :type account: int\n        :type money: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def withdraw(self, account, money):\n        \"\"\"\n        :type account: int\n        :type money: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your Bank object will be instantiated and called as such:\n# obj = Bank(balance)\n# param_1 = obj.transfer(account1,account2,money)\n# param_2 = obj.deposit(account,money)\n# param_3 = obj.withdraw(account,money)",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Python3",
                    "langSlug": "python3",
                    "code": "class Bank:\n\n    def __init__(self, balance: List[int]):\n        \n\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\n        \n\n    def deposit(self, account: int, money: int) -> bool:\n        \n\n    def withdraw(self, account: int, money: int) -> bool:\n        \n\n\n# Your Bank object will be instantiated and called as such:\n# obj = Bank(balance)\n# param_1 = obj.transfer(account1,account2,money)\n# param_2 = obj.deposit(account,money)\n# param_3 = obj.withdraw(account,money)",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "C",
                    "langSlug": "c",
                    "code": "\n\n\ntypedef struct {\n    \n} Bank;\n\n\nBank* bankCreate(long long* balance, int balanceSize) {\n    \n}\n\nbool bankTransfer(Bank* obj, int account1, int account2, long long money) {\n    \n}\n\nbool bankDeposit(Bank* obj, int account, long long money) {\n    \n}\n\nbool bankWithdraw(Bank* obj, int account, long long money) {\n    \n}\n\nvoid bankFree(Bank* obj) {\n    \n}\n\n/**\n * Your Bank struct will be instantiated and called as such:\n * Bank* obj = bankCreate(balance, balanceSize);\n * bool param_1 = bankTransfer(obj, account1, account2, money);\n \n * bool param_2 = bankDeposit(obj, account, money);\n \n * bool param_3 = bankWithdraw(obj, account, money);\n \n * bankFree(obj);\n*/",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "C#",
                    "langSlug": "csharp",
                    "code": "public class Bank {\n\n    public Bank(long[] balance) {\n        \n    }\n    \n    public bool Transfer(int account1, int account2, long money) {\n        \n    }\n    \n    public bool Deposit(int account, long money) {\n        \n    }\n    \n    public bool Withdraw(int account, long money) {\n        \n    }\n}\n\n/**\n * Your Bank object will be instantiated and called as such:\n * Bank obj = new Bank(balance);\n * bool param_1 = obj.Transfer(account1,account2,money);\n * bool param_2 = obj.Deposit(account,money);\n * bool param_3 = obj.Withdraw(account,money);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "JavaScript",
                    "langSlug": "javascript",
                    "code": "/**\n * @param {number[]} balance\n */\nvar Bank = function(balance) {\n    \n};\n\n/** \n * @param {number} account1 \n * @param {number} account2 \n * @param {number} money\n * @return {boolean}\n */\nBank.prototype.transfer = function(account1, account2, money) {\n    \n};\n\n/** \n * @param {number} account \n * @param {number} money\n * @return {boolean}\n */\nBank.prototype.deposit = function(account, money) {\n    \n};\n\n/** \n * @param {number} account \n * @param {number} money\n * @return {boolean}\n */\nBank.prototype.withdraw = function(account, money) {\n    \n};\n\n/** \n * Your Bank object will be instantiated and called as such:\n * var obj = new Bank(balance)\n * var param_1 = obj.transfer(account1,account2,money)\n * var param_2 = obj.deposit(account,money)\n * var param_3 = obj.withdraw(account,money)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "TypeScript",
                    "langSlug": "typescript",
                    "code": "class Bank {\n    constructor(balance: number[]) {\n        \n    }\n\n    transfer(account1: number, account2: number, money: number): boolean {\n        \n    }\n\n    deposit(account: number, money: number): boolean {\n        \n    }\n\n    withdraw(account: number, money: number): boolean {\n        \n    }\n}\n\n/**\n * Your Bank object will be instantiated and called as such:\n * var obj = new Bank(balance)\n * var param_1 = obj.transfer(account1,account2,money)\n * var param_2 = obj.deposit(account,money)\n * var param_3 = obj.withdraw(account,money)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "PHP",
                    "langSlug": "php",
                    "code": "class Bank {\n    /**\n     * @param Integer[] $balance\n     */\n    function __construct($balance) {\n        \n    }\n  \n    /**\n     * @param Integer $account1\n     * @param Integer $account2\n     * @param Integer $money\n     * @return Boolean\n     */\n    function transfer($account1, $account2, $money) {\n        \n    }\n  \n    /**\n     * @param Integer $account\n     * @param Integer $money\n     * @return Boolean\n     */\n    function deposit($account, $money) {\n        \n    }\n  \n    /**\n     * @param Integer $account\n     * @param Integer $money\n     * @return Boolean\n     */\n    function withdraw($account, $money) {\n        \n    }\n}\n\n/**\n * Your Bank object will be instantiated and called as such:\n * $obj = Bank($balance);\n * $ret_1 = $obj->transfer($account1, $account2, $money);\n * $ret_2 = $obj->deposit($account, $money);\n * $ret_3 = $obj->withdraw($account, $money);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Swift",
                    "langSlug": "swift",
                    "code": "\nclass Bank {\n\n    init(_ balance: [Int]) {\n        \n    }\n    \n    func transfer(_ account1: Int, _ account2: Int, _ money: Int) -> Bool {\n        \n    }\n    \n    func deposit(_ account: Int, _ money: Int) -> Bool {\n        \n    }\n    \n    func withdraw(_ account: Int, _ money: Int) -> Bool {\n        \n    }\n}\n\n/**\n * Your Bank object will be instantiated and called as such:\n * let obj = Bank(balance)\n * let ret_1: Bool = obj.transfer(account1, account2, money)\n * let ret_2: Bool = obj.deposit(account, money)\n * let ret_3: Bool = obj.withdraw(account, money)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Kotlin",
                    "langSlug": "kotlin",
                    "code": "class Bank(balance: LongArray) {\n\n    fun transfer(account1: Int, account2: Int, money: Long): Boolean {\n        \n    }\n\n    fun deposit(account: Int, money: Long): Boolean {\n        \n    }\n\n    fun withdraw(account: Int, money: Long): Boolean {\n        \n    }\n\n}\n\n/**\n * Your Bank object will be instantiated and called as such:\n * var obj = Bank(balance)\n * var param_1 = obj.transfer(account1,account2,money)\n * var param_2 = obj.deposit(account,money)\n * var param_3 = obj.withdraw(account,money)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Dart",
                    "langSlug": "dart",
                    "code": "class Bank {\n\n  Bank(List<int> balance) {\n    \n  }\n  \n  bool transfer(int account1, int account2, int money) {\n    \n  }\n  \n  bool deposit(int account, int money) {\n    \n  }\n  \n  bool withdraw(int account, int money) {\n    \n  }\n}\n\n/**\n * Your Bank object will be instantiated and called as such:\n * Bank obj = Bank(balance);\n * bool param1 = obj.transfer(account1,account2,money);\n * bool param2 = obj.deposit(account,money);\n * bool param3 = obj.withdraw(account,money);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Go",
                    "langSlug": "golang",
                    "code": "type Bank struct {\n    \n}\n\n\nfunc Constructor(balance []int64) Bank {\n    \n}\n\n\nfunc (this *Bank) Transfer(account1 int, account2 int, money int64) bool {\n    \n}\n\n\nfunc (this *Bank) Deposit(account int, money int64) bool {\n    \n}\n\n\nfunc (this *Bank) Withdraw(account int, money int64) bool {\n    \n}\n\n\n/**\n * Your Bank object will be instantiated and called as such:\n * obj := Constructor(balance);\n * param_1 := obj.Transfer(account1,account2,money);\n * param_2 := obj.Deposit(account,money);\n * param_3 := obj.Withdraw(account,money);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Ruby",
                    "langSlug": "ruby",
                    "code": "class Bank\n\n=begin\n    :type balance: Integer[]\n=end\n    def initialize(balance)\n        \n    end\n\n\n=begin\n    :type account1: Integer\n    :type account2: Integer\n    :type money: Integer\n    :rtype: Boolean\n=end\n    def transfer(account1, account2, money)\n        \n    end\n\n\n=begin\n    :type account: Integer\n    :type money: Integer\n    :rtype: Boolean\n=end\n    def deposit(account, money)\n        \n    end\n\n\n=begin\n    :type account: Integer\n    :type money: Integer\n    :rtype: Boolean\n=end\n    def withdraw(account, money)\n        \n    end\n\n\nend\n\n# Your Bank object will be instantiated and called as such:\n# obj = Bank.new(balance)\n# param_1 = obj.transfer(account1, account2, money)\n# param_2 = obj.deposit(account, money)\n# param_3 = obj.withdraw(account, money)",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Scala",
                    "langSlug": "scala",
                    "code": "class Bank(_balance: Array[Long]) {\n\n    def transfer(account1: Int, account2: Int, money: Long): Boolean = {\n        \n    }\n\n    def deposit(account: Int, money: Long): Boolean = {\n        \n    }\n\n    def withdraw(account: Int, money: Long): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your Bank object will be instantiated and called as such:\n * var obj = new Bank(balance)\n * var param_1 = obj.transfer(account1,account2,money)\n * var param_2 = obj.deposit(account,money)\n * var param_3 = obj.withdraw(account,money)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Rust",
                    "langSlug": "rust",
                    "code": "struct Bank {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Bank {\n\n    fn new(balance: Vec<i64>) -> Self {\n        \n    }\n    \n    fn transfer(&self, account1: i32, account2: i32, money: i64) -> bool {\n        \n    }\n    \n    fn deposit(&self, account: i32, money: i64) -> bool {\n        \n    }\n    \n    fn withdraw(&self, account: i32, money: i64) -> bool {\n        \n    }\n}\n\n/**\n * Your Bank object will be instantiated and called as such:\n * let obj = Bank::new(balance);\n * let ret_1: bool = obj.transfer(account1, account2, money);\n * let ret_2: bool = obj.deposit(account, money);\n * let ret_3: bool = obj.withdraw(account, money);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Racket",
                    "langSlug": "racket",
                    "code": "(define bank%\n  (class object%\n    (super-new)\n    \n    ; balance : (listof exact-integer?)\n    (init-field\n      balance)\n    \n    ; transfer : exact-integer? exact-integer? exact-integer? -> boolean?\n    (define/public (transfer account1 account2 money)\n      )\n    ; deposit : exact-integer? exact-integer? -> boolean?\n    (define/public (deposit account money)\n      )\n    ; withdraw : exact-integer? exact-integer? -> boolean?\n    (define/public (withdraw account money)\n      )))\n\n;; Your bank% object will be instantiated and called as such:\n;; (define obj (new bank% [balance balance]))\n;; (define param_1 (send obj transfer account1 account2 money))\n;; (define param_2 (send obj deposit account money))\n;; (define param_3 (send obj withdraw account money))",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Erlang",
                    "langSlug": "erlang",
                    "code": "-spec bank_init_(Balance :: [integer()]) -> any().\nbank_init_(Balance) ->\n  .\n\n-spec bank_transfer(Account1 :: integer(), Account2 :: integer(), Money :: integer()) -> boolean().\nbank_transfer(Account1, Account2, Money) ->\n  .\n\n-spec bank_deposit(Account :: integer(), Money :: integer()) -> boolean().\nbank_deposit(Account, Money) ->\n  .\n\n-spec bank_withdraw(Account :: integer(), Money :: integer()) -> boolean().\nbank_withdraw(Account, Money) ->\n  .\n\n\n%% Your functions will be called as such:\n%% bank_init_(Balance),\n%% Param_1 = bank_transfer(Account1, Account2, Money),\n%% Param_2 = bank_deposit(Account, Money),\n%% Param_3 = bank_withdraw(Account, Money),\n\n%% bank_init_ will be called before every test case, in which you can do some necessary initializations.",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Elixir",
                    "langSlug": "elixir",
                    "code": "defmodule Bank do\n  @spec init_(balance :: [integer]) :: any\n  def init_(balance) do\n    \n  end\n\n  @spec transfer(account1 :: integer, account2 :: integer, money :: integer) :: boolean\n  def transfer(account1, account2, money) do\n    \n  end\n\n  @spec deposit(account :: integer, money :: integer) :: boolean\n  def deposit(account, money) do\n    \n  end\n\n  @spec withdraw(account :: integer, money :: integer) :: boolean\n  def withdraw(account, money) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Bank.init_(balance)\n# param_1 = Bank.transfer(account1, account2, money)\n# param_2 = Bank.deposit(account, money)\n# param_3 = Bank.withdraw(account, money)\n\n# Bank.init_ will be called before every test case, in which you can do some necessary initializations.",
                    "__typename": "CodeSnippetNode"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.7K\", \"totalSubmission\": \"35.2K\", \"totalAcceptedRaw\": 22658, \"totalSubmissionRaw\": 35217, \"acRate\": \"64.3%\"}",
            "hints": [
                "How do you determine if a transaction will fail?",
                "Simply apply the operations if the transaction is valid."
            ],
            "solution": null,
            "status": null,
            "sampleTestCase": "[\"Bank\",\"withdraw\",\"transfer\",\"deposit\",\"transfer\",\"withdraw\"]\n[[[10,100,20,50,30]],[3,10],[5,1,20],[5,20],[3,4,15],[10,50]]",
            "metaData": "{\n  \"classname\": \"Bank\",\n  \"constructor\": {\n    \"params\": [\n      {\n        \"type\": \"long[]\",\n        \"name\": \"balance\"\n      }\n    ]\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"account1\"\n        },\n        {\n          \"type\": \"integer\",\n          \"name\": \"account2\"\n        },\n        {\n          \"type\": \"long\",\n          \"name\": \"money\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"return\": {\n        \"type\": \"boolean\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"account\"\n        },\n        {\n          \"type\": \"long\",\n          \"name\": \"money\"\n        }\n      ],\n      \"name\": \"deposit\",\n      \"return\": {\n        \"type\": \"boolean\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"account\"\n        },\n        {\n          \"type\": \"long\",\n          \"name\": \"money\"\n        }\n      ],\n      \"name\": \"withdraw\",\n      \"return\": {\n        \"type\": \"boolean\"\n      }\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"systemdesign\": true\n}",
            "judgerAvailable": true,
            "judgeType": "large",
            "mysqlSchemas": [],
            "enableRunCode": true,
            "enableTestMode": false,
            "enableDebugger": true,
            "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 20 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>OpenJDK 17</code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-10\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use 5.3.0 version of <a href=\\\"https://github.com/datastructures-js/priority-queue/tree/fb4fdb984834421279aeb081df7af624d17c2a03\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and 4.2.1 version of <a href=\\\"https://github.com/datastructures-js/queue/tree/e63563025a5a805aa16928cb53bcd517bfea9230\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.21</code></p>\\r\\n<p>Support <a href=\\\"https://github.com/emirpasic/gods/tree/v1.18.1\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods@v1.18.1</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.9.0</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 5.1.6, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2022 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 25.0\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.4 with Erlang/OTP 25.0\"], \"dart\": [\"Dart\", \"<p>Dart 2.17.3</p>\\r\\n\\r\\n<p>Your code will be run directly without compiling</p>\"]}",
            "libraryUrl": null,
            "adminUrl": null,
            "challengeQuestion": null,
            "__typename": "QuestionNode"
        }
    }
}