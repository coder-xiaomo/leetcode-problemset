{
    "data": {
        "question": {
            "questionId": "1722",
            "questionFrontendId": "1600",
            "boundTopicId": null,
            "title": "Throne Inheritance",
            "titleSlug": "throne-inheritance",
            "content": "<p>A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.</p>\n\n<p>The kingdom has a well-defined order of inheritance that consists of the king as the first member. Let&#39;s define the recursive function <code>Successor(x, curOrder)</code>, which given a person <code>x</code> and the inheritance order so far, returns who should be the next person after <code>x</code> in the order of inheritance.</p>\n\n<pre>\nSuccessor(x, curOrder):\n    if x has no children or all of x&#39;s children are in curOrder:\n        if x is the king return null\n        else return Successor(x&#39;s parent, curOrder)\n    else return x&#39;s oldest child who&#39;s not in curOrder\n</pre>\n\n<p>For example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice&#39;s son Jack.</p>\n\n<ol>\n\t<li>In the beginning, <code>curOrder</code> will be <code>[&quot;king&quot;]</code>.</li>\n\t<li>Calling <code>Successor(king, curOrder)</code> will return Alice, so we append to <code>curOrder</code> to get <code>[&quot;king&quot;, &quot;Alice&quot;]</code>.</li>\n\t<li>Calling <code>Successor(Alice, curOrder)</code> will return Jack, so we append to <code>curOrder</code> to get <code>[&quot;king&quot;, &quot;Alice&quot;, &quot;Jack&quot;]</code>.</li>\n\t<li>Calling <code>Successor(Jack, curOrder)</code> will return Bob, so we append to <code>curOrder</code> to get <code>[&quot;king&quot;, &quot;Alice&quot;, &quot;Jack&quot;, &quot;Bob&quot;]</code>.</li>\n\t<li>Calling <code>Successor(Bob, curOrder)</code> will return <code>null</code>. Thus the order of inheritance will be <code>[&quot;king&quot;, &quot;Alice&quot;, &quot;Jack&quot;, &quot;Bob&quot;]</code>.</li>\n</ol>\n\n<p>Using the above function, we can always obtain a unique order of inheritance.</p>\n\n<p>Implement the <code>ThroneInheritance</code> class:</p>\n\n<ul>\n\t<li><code>ThroneInheritance(string kingName)</code> Initializes an object of the <code>ThroneInheritance</code> class. The name of the king is given as part of the constructor.</li>\n\t<li><code>void birth(string parentName, string childName)</code> Indicates that <code>parentName</code> gave birth to <code>childName</code>.</li>\n\t<li><code>void death(string name)</code> Indicates the death of <code>name</code>. The death of the person doesn&#39;t affect the <code>Successor</code> function nor the current inheritance order. You can treat it as just marking the person as dead.</li>\n\t<li><code>string[] getInheritanceOrder()</code> Returns a list representing the current order of inheritance <strong>excluding</strong> dead people.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;ThroneInheritance&quot;, &quot;birth&quot;, &quot;birth&quot;, &quot;birth&quot;, &quot;birth&quot;, &quot;birth&quot;, &quot;birth&quot;, &quot;getInheritanceOrder&quot;, &quot;death&quot;, &quot;getInheritanceOrder&quot;]\n[[&quot;king&quot;], [&quot;king&quot;, &quot;andy&quot;], [&quot;king&quot;, &quot;bob&quot;], [&quot;king&quot;, &quot;catherine&quot;], [&quot;andy&quot;, &quot;matthew&quot;], [&quot;bob&quot;, &quot;alex&quot;], [&quot;bob&quot;, &quot;asha&quot;], [null], [&quot;bob&quot;], [null]]\n<strong>Output</strong>\n[null, null, null, null, null, null, null, [&quot;king&quot;, &quot;andy&quot;, &quot;matthew&quot;, &quot;bob&quot;, &quot;alex&quot;, &quot;asha&quot;, &quot;catherine&quot;], null, [&quot;king&quot;, &quot;andy&quot;, &quot;matthew&quot;, &quot;alex&quot;, &quot;asha&quot;, &quot;catherine&quot;]]\n\n<strong>Explanation</strong>\nThroneInheritance t= new ThroneInheritance(&quot;king&quot;); // order: <strong>king</strong>\nt.birth(&quot;king&quot;, &quot;andy&quot;); // order: king &gt; <strong>andy</strong>\nt.birth(&quot;king&quot;, &quot;bob&quot;); // order: king &gt; andy &gt; <strong>bob</strong>\nt.birth(&quot;king&quot;, &quot;catherine&quot;); // order: king &gt; andy &gt; bob &gt; <strong>catherine</strong>\nt.birth(&quot;andy&quot;, &quot;matthew&quot;); // order: king &gt; andy &gt; <strong>matthew</strong> &gt; bob &gt; catherine\nt.birth(&quot;bob&quot;, &quot;alex&quot;); // order: king &gt; andy &gt; matthew &gt; bob &gt; <strong>alex</strong> &gt; catherine\nt.birth(&quot;bob&quot;, &quot;asha&quot;); // order: king &gt; andy &gt; matthew &gt; bob &gt; alex &gt; <strong>asha</strong> &gt; catherine\nt.getInheritanceOrder(); // return [&quot;king&quot;, &quot;andy&quot;, &quot;matthew&quot;, &quot;bob&quot;, &quot;alex&quot;, &quot;asha&quot;, &quot;catherine&quot;]\nt.death(&quot;bob&quot;); // order: king &gt; andy &gt; matthew &gt; <strong><s>bob</s></strong> &gt; alex &gt; asha &gt; catherine\nt.getInheritanceOrder(); // return [&quot;king&quot;, &quot;andy&quot;, &quot;matthew&quot;, &quot;alex&quot;, &quot;asha&quot;, &quot;catherine&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= kingName.length, parentName.length, childName.length, name.length &lt;= 15</code></li>\n\t<li><code>kingName</code>, <code>parentName</code>, <code>childName</code>, and <code>name</code> consist of lowercase English letters only.</li>\n\t<li>All arguments <code>childName</code> and <code>kingName</code> are <strong>distinct</strong>.</li>\n\t<li>All <code>name</code> arguments of <code>death</code> will be passed to either the constructor or as <code>childName</code> to <code>birth</code> first.</li>\n\t<li>For each call to&nbsp;<code>birth(parentName, childName)</code>, it is guaranteed that&nbsp;<code>parentName</code> is alive.</li>\n\t<li>At most <code>10<sup>5</sup></code> calls will be made to <code>birth</code> and <code>death</code>.</li>\n\t<li>At most <code>10</code> calls will be made to <code>getInheritanceOrder</code>.</li>\n</ul>\n",
            "translatedTitle": null,
            "translatedContent": null,
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 175,
            "dislikes": 229,
            "isLiked": null,
            "similarQuestions": "[{\"title\": \"Operations on Tree\", \"titleSlug\": \"operations-on-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "exampleTestcases": "[\"ThroneInheritance\",\"birth\",\"birth\",\"birth\",\"birth\",\"birth\",\"birth\",\"getInheritanceOrder\",\"death\",\"getInheritanceOrder\"]\n[[\"king\"],[\"king\",\"andy\"],[\"king\",\"bob\"],[\"king\",\"catherine\"],[\"andy\",\"matthew\"],[\"bob\",\"alex\"],[\"bob\",\"asha\"],[null],[\"bob\"],[null]]",
            "categoryTitle": "Algorithms",
            "contributors": [],
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Tree",
                    "slug": "tree",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Design",
                    "slug": "design",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                }
            ],
            "companyTagStats": null,
            "codeSnippets": [
                {
                    "lang": "C++",
                    "langSlug": "cpp",
                    "code": "class ThroneInheritance {\npublic:\n    ThroneInheritance(string kingName) {\n        \n    }\n    \n    void birth(string parentName, string childName) {\n        \n    }\n    \n    void death(string name) {\n        \n    }\n    \n    vector<string> getInheritanceOrder() {\n        \n    }\n};\n\n/**\n * Your ThroneInheritance object will be instantiated and called as such:\n * ThroneInheritance* obj = new ThroneInheritance(kingName);\n * obj->birth(parentName,childName);\n * obj->death(name);\n * vector<string> param_3 = obj->getInheritanceOrder();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Java",
                    "langSlug": "java",
                    "code": "class ThroneInheritance {\n\n    public ThroneInheritance(String kingName) {\n        \n    }\n    \n    public void birth(String parentName, String childName) {\n        \n    }\n    \n    public void death(String name) {\n        \n    }\n    \n    public List<String> getInheritanceOrder() {\n        \n    }\n}\n\n/**\n * Your ThroneInheritance object will be instantiated and called as such:\n * ThroneInheritance obj = new ThroneInheritance(kingName);\n * obj.birth(parentName,childName);\n * obj.death(name);\n * List<String> param_3 = obj.getInheritanceOrder();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Python",
                    "langSlug": "python",
                    "code": "class ThroneInheritance(object):\n\n    def __init__(self, kingName):\n        \"\"\"\n        :type kingName: str\n        \"\"\"\n        \n\n    def birth(self, parentName, childName):\n        \"\"\"\n        :type parentName: str\n        :type childName: str\n        :rtype: None\n        \"\"\"\n        \n\n    def death(self, name):\n        \"\"\"\n        :type name: str\n        :rtype: None\n        \"\"\"\n        \n\n    def getInheritanceOrder(self):\n        \"\"\"\n        :rtype: List[str]\n        \"\"\"\n        \n\n\n# Your ThroneInheritance object will be instantiated and called as such:\n# obj = ThroneInheritance(kingName)\n# obj.birth(parentName,childName)\n# obj.death(name)\n# param_3 = obj.getInheritanceOrder()",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Python3",
                    "langSlug": "python3",
                    "code": "class ThroneInheritance:\n\n    def __init__(self, kingName: str):\n        \n\n    def birth(self, parentName: str, childName: str) -> None:\n        \n\n    def death(self, name: str) -> None:\n        \n\n    def getInheritanceOrder(self) -> List[str]:\n        \n\n\n# Your ThroneInheritance object will be instantiated and called as such:\n# obj = ThroneInheritance(kingName)\n# obj.birth(parentName,childName)\n# obj.death(name)\n# param_3 = obj.getInheritanceOrder()",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "C",
                    "langSlug": "c",
                    "code": "\n\n\ntypedef struct {\n    \n} ThroneInheritance;\n\n\nThroneInheritance* throneInheritanceCreate(char * kingName) {\n    \n}\n\nvoid throneInheritanceBirth(ThroneInheritance* obj, char * parentName, char * childName) {\n  \n}\n\nvoid throneInheritanceDeath(ThroneInheritance* obj, char * name) {\n  \n}\n\nchar ** throneInheritanceGetInheritanceOrder(ThroneInheritance* obj, int* retSize) {\n  \n}\n\nvoid throneInheritanceFree(ThroneInheritance* obj) {\n    \n}\n\n/**\n * Your ThroneInheritance struct will be instantiated and called as such:\n * ThroneInheritance* obj = throneInheritanceCreate(kingName);\n * throneInheritanceBirth(obj, parentName, childName);\n \n * throneInheritanceDeath(obj, name);\n \n * char ** param_3 = throneInheritanceGetInheritanceOrder(obj, retSize);\n \n * throneInheritanceFree(obj);\n*/",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "C#",
                    "langSlug": "csharp",
                    "code": "public class ThroneInheritance {\n\n    public ThroneInheritance(string kingName) {\n        \n    }\n    \n    public void Birth(string parentName, string childName) {\n        \n    }\n    \n    public void Death(string name) {\n        \n    }\n    \n    public IList<string> GetInheritanceOrder() {\n        \n    }\n}\n\n/**\n * Your ThroneInheritance object will be instantiated and called as such:\n * ThroneInheritance obj = new ThroneInheritance(kingName);\n * obj.Birth(parentName,childName);\n * obj.Death(name);\n * IList<string> param_3 = obj.GetInheritanceOrder();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "JavaScript",
                    "langSlug": "javascript",
                    "code": "/**\n * @param {string} kingName\n */\nvar ThroneInheritance = function(kingName) {\n    \n};\n\n/** \n * @param {string} parentName \n * @param {string} childName\n * @return {void}\n */\nThroneInheritance.prototype.birth = function(parentName, childName) {\n    \n};\n\n/** \n * @param {string} name\n * @return {void}\n */\nThroneInheritance.prototype.death = function(name) {\n    \n};\n\n/**\n * @return {string[]}\n */\nThroneInheritance.prototype.getInheritanceOrder = function() {\n    \n};\n\n/** \n * Your ThroneInheritance object will be instantiated and called as such:\n * var obj = new ThroneInheritance(kingName)\n * obj.birth(parentName,childName)\n * obj.death(name)\n * var param_3 = obj.getInheritanceOrder()\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Ruby",
                    "langSlug": "ruby",
                    "code": "class ThroneInheritance\n\n=begin\n    :type king_name: String\n=end\n    def initialize(king_name)\n        \n    end\n\n\n=begin\n    :type parent_name: String\n    :type child_name: String\n    :rtype: Void\n=end\n    def birth(parent_name, child_name)\n        \n    end\n\n\n=begin\n    :type name: String\n    :rtype: Void\n=end\n    def death(name)\n        \n    end\n\n\n=begin\n    :rtype: String[]\n=end\n    def get_inheritance_order()\n        \n    end\n\n\nend\n\n# Your ThroneInheritance object will be instantiated and called as such:\n# obj = ThroneInheritance.new(king_name)\n# obj.birth(parent_name, child_name)\n# obj.death(name)\n# param_3 = obj.get_inheritance_order()",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Swift",
                    "langSlug": "swift",
                    "code": "\nclass ThroneInheritance {\n\n    init(_ kingName: String) {\n        \n    }\n    \n    func birth(_ parentName: String, _ childName: String) {\n        \n    }\n    \n    func death(_ name: String) {\n        \n    }\n    \n    func getInheritanceOrder() -> [String] {\n        \n    }\n}\n\n/**\n * Your ThroneInheritance object will be instantiated and called as such:\n * let obj = ThroneInheritance(kingName)\n * obj.birth(parentName, childName)\n * obj.death(name)\n * let ret_3: [String] = obj.getInheritanceOrder()\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Go",
                    "langSlug": "golang",
                    "code": "type ThroneInheritance struct {\n    \n}\n\n\nfunc Constructor(kingName string) ThroneInheritance {\n    \n}\n\n\nfunc (this *ThroneInheritance) Birth(parentName string, childName string)  {\n    \n}\n\n\nfunc (this *ThroneInheritance) Death(name string)  {\n    \n}\n\n\nfunc (this *ThroneInheritance) GetInheritanceOrder() []string {\n    \n}\n\n\n/**\n * Your ThroneInheritance object will be instantiated and called as such:\n * obj := Constructor(kingName);\n * obj.Birth(parentName,childName);\n * obj.Death(name);\n * param_3 := obj.GetInheritanceOrder();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Scala",
                    "langSlug": "scala",
                    "code": "class ThroneInheritance(_kingName: String) {\n\n    def birth(parentName: String, childName: String) {\n        \n    }\n\n    def death(name: String) {\n        \n    }\n\n    def getInheritanceOrder(): List[String] = {\n        \n    }\n\n}\n\n/**\n * Your ThroneInheritance object will be instantiated and called as such:\n * var obj = new ThroneInheritance(kingName)\n * obj.birth(parentName,childName)\n * obj.death(name)\n * var param_3 = obj.getInheritanceOrder()\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Kotlin",
                    "langSlug": "kotlin",
                    "code": "class ThroneInheritance(kingName: String) {\n\n    fun birth(parentName: String, childName: String) {\n        \n    }\n\n    fun death(name: String) {\n        \n    }\n\n    fun getInheritanceOrder(): List<String> {\n        \n    }\n\n}\n\n/**\n * Your ThroneInheritance object will be instantiated and called as such:\n * var obj = ThroneInheritance(kingName)\n * obj.birth(parentName,childName)\n * obj.death(name)\n * var param_3 = obj.getInheritanceOrder()\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Rust",
                    "langSlug": "rust",
                    "code": "struct ThroneInheritance {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl ThroneInheritance {\n\n    fn new(kingName: String) -> Self {\n        \n    }\n    \n    fn birth(&self, parent_name: String, child_name: String) {\n        \n    }\n    \n    fn death(&self, name: String) {\n        \n    }\n    \n    fn get_inheritance_order(&self) -> Vec<String> {\n        \n    }\n}\n\n/**\n * Your ThroneInheritance object will be instantiated and called as such:\n * let obj = ThroneInheritance::new(kingName);\n * obj.birth(parentName, childName);\n * obj.death(name);\n * let ret_3: Vec<String> = obj.get_inheritance_order();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "PHP",
                    "langSlug": "php",
                    "code": "class ThroneInheritance {\n    /**\n     * @param String $kingName\n     */\n    function __construct($kingName) {\n        \n    }\n  \n    /**\n     * @param String $parentName\n     * @param String $childName\n     * @return NULL\n     */\n    function birth($parentName, $childName) {\n        \n    }\n  \n    /**\n     * @param String $name\n     * @return NULL\n     */\n    function death($name) {\n        \n    }\n  \n    /**\n     * @return String[]\n     */\n    function getInheritanceOrder() {\n        \n    }\n}\n\n/**\n * Your ThroneInheritance object will be instantiated and called as such:\n * $obj = ThroneInheritance($kingName);\n * $obj->birth($parentName, $childName);\n * $obj->death($name);\n * $ret_3 = $obj->getInheritanceOrder();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "TypeScript",
                    "langSlug": "typescript",
                    "code": "class ThroneInheritance {\n    constructor(kingName: string) {\n\n    }\n\n    birth(parentName: string, childName: string): void {\n\n    }\n\n    death(name: string): void {\n\n    }\n\n    getInheritanceOrder(): string[] {\n\n    }\n}\n\n/**\n * Your ThroneInheritance object will be instantiated and called as such:\n * var obj = new ThroneInheritance(kingName)\n * obj.birth(parentName,childName)\n * obj.death(name)\n * var param_3 = obj.getInheritanceOrder()\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Racket",
                    "langSlug": "racket",
                    "code": "(define throne-inheritance%\n  (class object%\n    (super-new)\n\n    ; king-name : string?\n    (init-field\n      king-name)\n    \n    ; birth : string? string? -> void?\n    (define/public (birth parent-name child-name)\n\n      )\n    ; death : string? -> void?\n    (define/public (death name)\n\n      )\n    ; get-inheritance-order : -> (listof string?)\n    (define/public (get-inheritance-order)\n\n      )))\n\n;; Your throne-inheritance% object will be instantiated and called as such:\n;; (define obj (new throne-inheritance% [king-name king-name]))\n;; (send obj birth parent-name child-name)\n;; (send obj death name)\n;; (define param_3 (send obj get-inheritance-order))",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Erlang",
                    "langSlug": "erlang",
                    "code": "-spec throne_inheritance_init_(KingName :: unicode:unicode_binary()) -> any().\nthrone_inheritance_init_(KingName) ->\n  .\n\n-spec throne_inheritance_birth(ParentName :: unicode:unicode_binary(), ChildName :: unicode:unicode_binary()) -> any().\nthrone_inheritance_birth(ParentName, ChildName) ->\n  .\n\n-spec throne_inheritance_death(Name :: unicode:unicode_binary()) -> any().\nthrone_inheritance_death(Name) ->\n  .\n\n-spec throne_inheritance_get_inheritance_order() -> [unicode:unicode_binary()].\nthrone_inheritance_get_inheritance_order() ->\n  .\n\n\n%% Your functions will be called as such:\n%% throne_inheritance_init_(KingName),\n%% throne_inheritance_birth(ParentName, ChildName),\n%% throne_inheritance_death(Name),\n%% Param_3 = throne_inheritance_get_inheritance_order(),\n\n%% throne_inheritance_init_ will be called before every test case, in which you can do some necessary initializations.",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Elixir",
                    "langSlug": "elixir",
                    "code": "defmodule ThroneInheritance do\n  @spec init_(king_name :: String.t) :: any\n  def init_(king_name) do\n\n  end\n\n  @spec birth(parent_name :: String.t, child_name :: String.t) :: any\n  def birth(parent_name, child_name) do\n\n  end\n\n  @spec death(name :: String.t) :: any\n  def death(name) do\n\n  end\n\n  @spec get_inheritance_order() :: [String.t]\n  def get_inheritance_order() do\n\n  end\nend\n\n# Your functions will be called as such:\n# ThroneInheritance.init_(king_name)\n# ThroneInheritance.birth(parent_name, child_name)\n# ThroneInheritance.death(name)\n# param_3 = ThroneInheritance.get_inheritance_order()\n\n# ThroneInheritance.init_ will be called before every test case, in which you can do some necessary initializations.",
                    "__typename": "CodeSnippetNode"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.3K\", \"totalSubmission\": \"18K\", \"totalAcceptedRaw\": 11322, \"totalSubmissionRaw\": 17977, \"acRate\": \"63.0%\"}",
            "hints": [
                "Create a tree structure of the family.",
                "Without deaths, the order of inheritance is simply a pre-order traversal of the tree.",
                "Mark the dead family members tree nodes and don't include them in the final order."
            ],
            "solution": null,
            "status": null,
            "sampleTestCase": "[\"ThroneInheritance\",\"birth\",\"birth\",\"birth\",\"birth\",\"birth\",\"birth\",\"getInheritanceOrder\",\"death\",\"getInheritanceOrder\"]\n[[\"king\"],[\"king\",\"andy\"],[\"king\",\"bob\"],[\"king\",\"catherine\"],[\"andy\",\"matthew\"],[\"bob\",\"alex\"],[\"bob\",\"asha\"],[null],[\"bob\"],[null]]",
            "metaData": "{\n  \"classname\": \"ThroneInheritance\",\n  \"constructor\": {\n    \"params\": [\n      {\n        \"type\": \"string\",\n        \"name\": \"kingName\"\n      }\n    ]\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"parentName\"\n        },\n        {\n          \"type\": \"string\",\n          \"name\": \"childName\"\n        }\n      ],\n      \"name\": \"birth\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"name\"\n        }\n      ],\n      \"name\": \"death\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [],\n      \"return\": {\n        \"type\": \"list<string>\"\n      },\n      \"name\": \"getInheritanceOrder\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"systemdesign\": true\n}",
            "judgerAvailable": true,
            "judgeType": "large",
            "mysqlSchemas": [],
            "enableRunCode": true,
            "enableTestMode": false,
            "enableDebugger": true,
            "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
            "libraryUrl": null,
            "adminUrl": null,
            "challengeQuestion": null,
            "__typename": "QuestionNode"
        }
    }
}