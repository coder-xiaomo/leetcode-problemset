{
    "data": {
        "question": {
            "questionId": "1582",
            "questionFrontendId": "1472",
            "boundTopicId": null,
            "title": "Design Browser History",
            "titleSlug": "design-browser-history",
            "content": "<p>You have a <strong>browser</strong> of one tab where you start on the <code>homepage</code> and you can visit another <code>url</code>, get back in the history number of <code>steps</code> or move forward in the history number of <code>steps</code>.</p>\n\n<p>Implement the <code>BrowserHistory</code> class:</p>\n\n<ul>\n\t<li><code>BrowserHistory(string homepage)</code> Initializes the object with the <code>homepage</code>&nbsp;of the browser.</li>\n\t<li><code>void visit(string url)</code>&nbsp;Visits&nbsp;<code>url</code> from the current page. It clears up all the forward history.</li>\n\t<li><code>string back(int steps)</code>&nbsp;Move <code>steps</code> back in history. If you can only return <code>x</code> steps in the history and <code>steps &gt; x</code>, you will&nbsp;return only <code>x</code> steps. Return the current <code>url</code>&nbsp;after moving back in history <strong>at most</strong> <code>steps</code>.</li>\n\t<li><code>string forward(int steps)</code>&nbsp;Move <code>steps</code> forward in history. If you can only forward <code>x</code> steps in the history and <code>steps &gt; x</code>, you will&nbsp;forward only&nbsp;<code>x</code> steps. Return the current <code>url</code>&nbsp;after forwarding in history <strong>at most</strong> <code>steps</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<pre>\n<b>Input:</b>\n[&quot;BrowserHistory&quot;,&quot;visit&quot;,&quot;visit&quot;,&quot;visit&quot;,&quot;back&quot;,&quot;back&quot;,&quot;forward&quot;,&quot;visit&quot;,&quot;forward&quot;,&quot;back&quot;,&quot;back&quot;]\n[[&quot;leetcode.com&quot;],[&quot;google.com&quot;],[&quot;facebook.com&quot;],[&quot;youtube.com&quot;],[1],[1],[1],[&quot;linkedin.com&quot;],[2],[2],[7]]\n<b>Output:</b>\n[null,null,null,null,&quot;facebook.com&quot;,&quot;google.com&quot;,&quot;facebook.com&quot;,null,&quot;linkedin.com&quot;,&quot;google.com&quot;,&quot;leetcode.com&quot;]\n\n<b>Explanation:</b>\nBrowserHistory browserHistory = new BrowserHistory(&quot;leetcode.com&quot;);\nbrowserHistory.visit(&quot;google.com&quot;);       // You are in &quot;leetcode.com&quot;. Visit &quot;google.com&quot;\nbrowserHistory.visit(&quot;facebook.com&quot;);     // You are in &quot;google.com&quot;. Visit &quot;facebook.com&quot;\nbrowserHistory.visit(&quot;youtube.com&quot;);      // You are in &quot;facebook.com&quot;. Visit &quot;youtube.com&quot;\nbrowserHistory.back(1);                   // You are in &quot;youtube.com&quot;, move back to &quot;facebook.com&quot; return &quot;facebook.com&quot;\nbrowserHistory.back(1);                   // You are in &quot;facebook.com&quot;, move back to &quot;google.com&quot; return &quot;google.com&quot;\nbrowserHistory.forward(1);                // You are in &quot;google.com&quot;, move forward to &quot;facebook.com&quot; return &quot;facebook.com&quot;\nbrowserHistory.visit(&quot;linkedin.com&quot;);     // You are in &quot;facebook.com&quot;. Visit &quot;linkedin.com&quot;\nbrowserHistory.forward(2);                // You are in &quot;linkedin.com&quot;, you cannot move forward any steps.\nbrowserHistory.back(2);                   // You are in &quot;linkedin.com&quot;, move back two steps to &quot;facebook.com&quot; then to &quot;google.com&quot;. return &quot;google.com&quot;\nbrowserHistory.back(7);                   // You are in &quot;google.com&quot;, you can move back only one step to &quot;leetcode.com&quot;. return &quot;leetcode.com&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= homepage.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= url.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= steps &lt;= 100</code></li>\n\t<li><code>homepage</code> and <code>url</code> consist of&nbsp; &#39;.&#39; or lower case English letters.</li>\n\t<li>At most <code>5000</code>&nbsp;calls will be made to <code>visit</code>, <code>back</code>, and <code>forward</code>.</li>\n</ul>\n",
            "translatedTitle": null,
            "translatedContent": null,
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3640,
            "dislikes": 217,
            "isLiked": null,
            "similarQuestions": "[{\"title\": \"Design Video Sharing Platform\", \"titleSlug\": \"design-video-sharing-platform\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "exampleTestcases": "[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]",
            "categoryTitle": "Algorithms",
            "contributors": [],
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Stack",
                    "slug": "stack",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Design",
                    "slug": "design",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Doubly-Linked List",
                    "slug": "doubly-linked-list",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Data Stream",
                    "slug": "data-stream",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                }
            ],
            "companyTagStats": null,
            "codeSnippets": [
                {
                    "lang": "C++",
                    "langSlug": "cpp",
                    "code": "class BrowserHistory {\npublic:\n    BrowserHistory(string homepage) {\n        \n    }\n    \n    void visit(string url) {\n        \n    }\n    \n    string back(int steps) {\n        \n    }\n    \n    string forward(int steps) {\n        \n    }\n};\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory* obj = new BrowserHistory(homepage);\n * obj->visit(url);\n * string param_2 = obj->back(steps);\n * string param_3 = obj->forward(steps);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Java",
                    "langSlug": "java",
                    "code": "class BrowserHistory {\n\n    public BrowserHistory(String homepage) {\n        \n    }\n    \n    public void visit(String url) {\n        \n    }\n    \n    public String back(int steps) {\n        \n    }\n    \n    public String forward(int steps) {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory obj = new BrowserHistory(homepage);\n * obj.visit(url);\n * String param_2 = obj.back(steps);\n * String param_3 = obj.forward(steps);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Python",
                    "langSlug": "python",
                    "code": "class BrowserHistory(object):\n\n    def __init__(self, homepage):\n        \"\"\"\n        :type homepage: str\n        \"\"\"\n        \n\n    def visit(self, url):\n        \"\"\"\n        :type url: str\n        :rtype: None\n        \"\"\"\n        \n\n    def back(self, steps):\n        \"\"\"\n        :type steps: int\n        :rtype: str\n        \"\"\"\n        \n\n    def forward(self, steps):\n        \"\"\"\n        :type steps: int\n        :rtype: str\n        \"\"\"\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Python3",
                    "langSlug": "python3",
                    "code": "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        \n\n    def visit(self, url: str) -> None:\n        \n\n    def back(self, steps: int) -> str:\n        \n\n    def forward(self, steps: int) -> str:\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "C",
                    "langSlug": "c",
                    "code": "\n\n\ntypedef struct {\n    \n} BrowserHistory;\n\n\nBrowserHistory* browserHistoryCreate(char* homepage) {\n    \n}\n\nvoid browserHistoryVisit(BrowserHistory* obj, char* url) {\n    \n}\n\nchar* browserHistoryBack(BrowserHistory* obj, int steps) {\n    \n}\n\nchar* browserHistoryForward(BrowserHistory* obj, int steps) {\n    \n}\n\nvoid browserHistoryFree(BrowserHistory* obj) {\n    \n}\n\n/**\n * Your BrowserHistory struct will be instantiated and called as such:\n * BrowserHistory* obj = browserHistoryCreate(homepage);\n * browserHistoryVisit(obj, url);\n \n * char* param_2 = browserHistoryBack(obj, steps);\n \n * char* param_3 = browserHistoryForward(obj, steps);\n \n * browserHistoryFree(obj);\n*/",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "C#",
                    "langSlug": "csharp",
                    "code": "public class BrowserHistory {\n\n    public BrowserHistory(string homepage) {\n        \n    }\n    \n    public void Visit(string url) {\n        \n    }\n    \n    public string Back(int steps) {\n        \n    }\n    \n    public string Forward(int steps) {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory obj = new BrowserHistory(homepage);\n * obj.Visit(url);\n * string param_2 = obj.Back(steps);\n * string param_3 = obj.Forward(steps);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "JavaScript",
                    "langSlug": "javascript",
                    "code": "/**\n * @param {string} homepage\n */\nvar BrowserHistory = function(homepage) {\n    \n};\n\n/** \n * @param {string} url\n * @return {void}\n */\nBrowserHistory.prototype.visit = function(url) {\n    \n};\n\n/** \n * @param {number} steps\n * @return {string}\n */\nBrowserHistory.prototype.back = function(steps) {\n    \n};\n\n/** \n * @param {number} steps\n * @return {string}\n */\nBrowserHistory.prototype.forward = function(steps) {\n    \n};\n\n/** \n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = new BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "TypeScript",
                    "langSlug": "typescript",
                    "code": "class BrowserHistory {\n    constructor(homepage: string) {\n        \n    }\n\n    visit(url: string): void {\n        \n    }\n\n    back(steps: number): string {\n        \n    }\n\n    forward(steps: number): string {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = new BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "PHP",
                    "langSlug": "php",
                    "code": "class BrowserHistory {\n    /**\n     * @param String $homepage\n     */\n    function __construct($homepage) {\n        \n    }\n  \n    /**\n     * @param String $url\n     * @return NULL\n     */\n    function visit($url) {\n        \n    }\n  \n    /**\n     * @param Integer $steps\n     * @return String\n     */\n    function back($steps) {\n        \n    }\n  \n    /**\n     * @param Integer $steps\n     * @return String\n     */\n    function forward($steps) {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * $obj = BrowserHistory($homepage);\n * $obj->visit($url);\n * $ret_2 = $obj->back($steps);\n * $ret_3 = $obj->forward($steps);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Swift",
                    "langSlug": "swift",
                    "code": "\nclass BrowserHistory {\n\n    init(_ homepage: String) {\n        \n    }\n    \n    func visit(_ url: String) {\n        \n    }\n    \n    func back(_ steps: Int) -> String {\n        \n    }\n    \n    func forward(_ steps: Int) -> String {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * let obj = BrowserHistory(homepage)\n * obj.visit(url)\n * let ret_2: String = obj.back(steps)\n * let ret_3: String = obj.forward(steps)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Kotlin",
                    "langSlug": "kotlin",
                    "code": "class BrowserHistory(homepage: String) {\n\n    fun visit(url: String) {\n        \n    }\n\n    fun back(steps: Int): String {\n        \n    }\n\n    fun forward(steps: Int): String {\n        \n    }\n\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Dart",
                    "langSlug": "dart",
                    "code": "class BrowserHistory {\n\n  BrowserHistory(String homepage) {\n    \n  }\n  \n  void visit(String url) {\n    \n  }\n  \n  String back(int steps) {\n    \n  }\n  \n  String forward(int steps) {\n    \n  }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory obj = BrowserHistory(homepage);\n * obj.visit(url);\n * String param2 = obj.back(steps);\n * String param3 = obj.forward(steps);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Go",
                    "langSlug": "golang",
                    "code": "type BrowserHistory struct {\n    \n}\n\n\nfunc Constructor(homepage string) BrowserHistory {\n    \n}\n\n\nfunc (this *BrowserHistory) Visit(url string)  {\n    \n}\n\n\nfunc (this *BrowserHistory) Back(steps int) string {\n    \n}\n\n\nfunc (this *BrowserHistory) Forward(steps int) string {\n    \n}\n\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * obj := Constructor(homepage);\n * obj.Visit(url);\n * param_2 := obj.Back(steps);\n * param_3 := obj.Forward(steps);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Ruby",
                    "langSlug": "ruby",
                    "code": "class BrowserHistory\n\n=begin\n    :type homepage: String\n=end\n    def initialize(homepage)\n        \n    end\n\n\n=begin\n    :type url: String\n    :rtype: Void\n=end\n    def visit(url)\n        \n    end\n\n\n=begin\n    :type steps: Integer\n    :rtype: String\n=end\n    def back(steps)\n        \n    end\n\n\n=begin\n    :type steps: Integer\n    :rtype: String\n=end\n    def forward(steps)\n        \n    end\n\n\nend\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory.new(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Scala",
                    "langSlug": "scala",
                    "code": "class BrowserHistory(_homepage: String) {\n\n    def visit(url: String) {\n        \n    }\n\n    def back(steps: Int): String = {\n        \n    }\n\n    def forward(steps: Int): String = {\n        \n    }\n\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = new BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Rust",
                    "langSlug": "rust",
                    "code": "struct BrowserHistory {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl BrowserHistory {\n\n    fn new(homepage: String) -> Self {\n        \n    }\n    \n    fn visit(&self, url: String) {\n        \n    }\n    \n    fn back(&self, steps: i32) -> String {\n        \n    }\n    \n    fn forward(&self, steps: i32) -> String {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * let obj = BrowserHistory::new(homepage);\n * obj.visit(url);\n * let ret_2: String = obj.back(steps);\n * let ret_3: String = obj.forward(steps);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Racket",
                    "langSlug": "racket",
                    "code": "(define browser-history%\n  (class object%\n    (super-new)\n    \n    ; homepage : string?\n    (init-field\n      homepage)\n    \n    ; visit : string? -> void?\n    (define/public (visit url)\n      )\n    ; back : exact-integer? -> string?\n    (define/public (back steps)\n      )\n    ; forward : exact-integer? -> string?\n    (define/public (forward steps)\n      )))\n\n;; Your browser-history% object will be instantiated and called as such:\n;; (define obj (new browser-history% [homepage homepage]))\n;; (send obj visit url)\n;; (define param_2 (send obj back steps))\n;; (define param_3 (send obj forward steps))",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Elixir",
                    "langSlug": "elixir",
                    "code": "defmodule BrowserHistory do\n  @spec init_(homepage :: String.t) :: any\n  def init_(homepage) do\n    \n  end\n\n  @spec visit(url :: String.t) :: any\n  def visit(url) do\n    \n  end\n\n  @spec back(steps :: integer) :: String.t\n  def back(steps) do\n    \n  end\n\n  @spec forward(steps :: integer) :: String.t\n  def forward(steps) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# BrowserHistory.init_(homepage)\n# BrowserHistory.visit(url)\n# param_2 = BrowserHistory.back(steps)\n# param_3 = BrowserHistory.forward(steps)\n\n# BrowserHistory.init_ will be called before every test case, in which you can do some necessary initializations.",
                    "__typename": "CodeSnippetNode"
                }
            ],
            "stats": "{\"totalAccepted\": \"207.5K\", \"totalSubmission\": \"267.4K\", \"totalAcceptedRaw\": 207475, \"totalSubmissionRaw\": 267418, \"acRate\": \"77.6%\"}",
            "hints": [
                "Use two stacks: one for back history, and one for forward history. You can simulate the functions by popping an element from one stack and pushing it into the other.",
                "Can you improve program runtime by using a different data structure?"
            ],
            "solution": {
                "id": "1700",
                "canSeeDetail": false,
                "paidOnly": true,
                "hasVideoSolution": false,
                "paidOnlyVideo": true,
                "__typename": "ArticleNode"
            },
            "status": null,
            "sampleTestCase": "[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]",
            "metaData": "{\n  \"classname\": \"BrowserHistory\",\n  \"constructor\": {\n    \"params\": [\n      {\n        \"type\": \"string\",\n        \"name\": \"homepage\"\n      }\n    ]\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"url\"\n        }\n      ],\n      \"name\": \"visit\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"steps\"\n        }\n      ],\n      \"name\": \"back\",\n      \"return\": {\n        \"type\": \"string\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"steps\"\n        }\n      ],\n      \"name\": \"forward\",\n      \"return\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"systemdesign\": true\n}",
            "judgerAvailable": true,
            "judgeType": "large",
            "mysqlSchemas": [],
            "enableRunCode": true,
            "enableTestMode": false,
            "enableDebugger": true,
            "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 20 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>OpenJDK 17</code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-10\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use 5.3.0 version of <a href=\\\"https://github.com/datastructures-js/priority-queue/tree/fb4fdb984834421279aeb081df7af624d17c2a03\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and 4.2.1 version of <a href=\\\"https://github.com/datastructures-js/queue/tree/e63563025a5a805aa16928cb53bcd517bfea9230\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.21</code></p>\\r\\n<p>Support <a href=\\\"https://github.com/emirpasic/gods/tree/v1.18.1\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods@v1.18.1</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.9.0</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 5.1.6, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2022 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.4 with Erlang/OTP 25.0\"], \"dart\": [\"Dart\", \"<p>Dart 2.17.3</p>\\r\\n\\r\\n<p>Your code will be run directly without compiling</p>\"]}",
            "libraryUrl": null,
            "adminUrl": null,
            "challengeQuestion": {
                "id": "1270",
                "date": "2023-03-18",
                "incompleteChallengeCount": 0,
                "streakCount": 0,
                "type": "DAILY",
                "__typename": "ChallengeQuestionNode"
            },
            "__typename": "QuestionNode"
        }
    }
}