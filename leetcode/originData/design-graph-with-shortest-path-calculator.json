{
    "data": {
        "question": {
            "questionId": "2678",
            "questionFrontendId": "2642",
            "boundTopicId": null,
            "title": "Design Graph With Shortest Path Calculator",
            "titleSlug": "design-graph-with-shortest-path-calculator",
            "content": "<p>There is a <strong>directed weighted</strong> graph that consists of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The edges of the graph are initially represented by the given array <code>edges</code> where <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, edgeCost<sub>i</sub>]</code> meaning that there is an edge from <code>from<sub>i</sub></code> to <code>to<sub>i</sub></code> with the cost <code>edgeCost<sub>i</sub></code>.</p>\n\n<p>Implement the <code>Graph</code> class:</p>\n\n<ul>\n\t<li><code>Graph(int n, int[][] edges)</code> initializes the object with <code>n</code> nodes and the given edges.</li>\n\t<li><code>addEdge(int[] edge)</code> adds an edge to the list of edges where <code>edge = [from, to, edgeCost]</code>. It is guaranteed that there is no edge between the two nodes before adding this one.</li>\n\t<li><code>int shortestPath(int node1, int node2)</code> returns the <strong>minimum</strong> cost of a path from <code>node1</code> to <code>node2</code>. If no path exists, return <code>-1</code>. The cost of a path is the sum of the costs of the edges in the path.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/11/graph3drawio-2.png\" style=\"width: 621px; height: 191px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;Graph&quot;, &quot;shortestPath&quot;, &quot;shortestPath&quot;, &quot;addEdge&quot;, &quot;shortestPath&quot;]\n[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]]\n<strong>Output</strong>\n[null, 6, -1, null, 6]\n\n<strong>Explanation</strong>\nGraph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);\ng.shortestPath(3, 2); // return 6. The shortest path from 3 to 2 in the first diagram above is 3 -&gt; 0 -&gt; 1 -&gt; 2 with a total cost of 3 + 2 + 1 = 6.\ng.shortestPath(0, 3); // return -1. There is no path from 0 to 3.\ng.addEdge([1, 3, 4]); // We add an edge from node 1 to node 3, and we get the second diagram above.\ng.shortestPath(0, 3); // return 6. The shortest path from 0 to 3 now is 0 -&gt; 1 -&gt; 3 with a total cost of 2 + 4 = 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= edges.length &lt;= n * (n - 1)</code></li>\n\t<li><code>edges[i].length == edge.length == 3</code></li>\n\t<li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub>, from, to, node1, node2 &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= edgeCost<sub>i</sub>, edgeCost &lt;= 10<sup>6</sup></code></li>\n\t<li>There are no repeated edges and no self-loops in the graph at any point.</li>\n\t<li>At most <code>100</code> calls will be made for <code>addEdge</code>.</li>\n\t<li>At most <code>100</code> calls will be made for <code>shortestPath</code>.</li>\n</ul>\n",
            "translatedTitle": null,
            "translatedContent": null,
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 754,
            "dislikes": 51,
            "isLiked": null,
            "similarQuestions": "[{\"title\": \"Number of Restricted Paths From First to Last Node\", \"titleSlug\": \"number-of-restricted-paths-from-first-to-last-node\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Closest Node to Path in Tree\", \"titleSlug\": \"closest-node-to-path-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "exampleTestcases": "[\"Graph\",\"shortestPath\",\"shortestPath\",\"addEdge\",\"shortestPath\"]\n[[4,[[0,2,5],[0,1,2],[1,2,1],[3,0,3]]],[3,2],[0,3],[[1,3,4]],[0,3]]",
            "categoryTitle": "Algorithms",
            "contributors": [],
            "topicTags": [
                {
                    "name": "Graph",
                    "slug": "graph",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Design",
                    "slug": "design",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path",
                    "translatedName": null,
                    "__typename": "TopicTagNode"
                }
            ],
            "companyTagStats": null,
            "codeSnippets": [
                {
                    "lang": "C++",
                    "langSlug": "cpp",
                    "code": "class Graph {\npublic:\n    Graph(int n, vector<vector<int>>& edges) {\n        \n    }\n    \n    void addEdge(vector<int> edge) {\n        \n    }\n    \n    int shortestPath(int node1, int node2) {\n        \n    }\n};\n\n/**\n * Your Graph object will be instantiated and called as such:\n * Graph* obj = new Graph(n, edges);\n * obj->addEdge(edge);\n * int param_2 = obj->shortestPath(node1,node2);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Java",
                    "langSlug": "java",
                    "code": "class Graph {\n\n    public Graph(int n, int[][] edges) {\n        \n    }\n    \n    public void addEdge(int[] edge) {\n        \n    }\n    \n    public int shortestPath(int node1, int node2) {\n        \n    }\n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * Graph obj = new Graph(n, edges);\n * obj.addEdge(edge);\n * int param_2 = obj.shortestPath(node1,node2);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Python",
                    "langSlug": "python",
                    "code": "class Graph(object):\n\n    def __init__(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        \"\"\"\n        \n\n    def addEdge(self, edge):\n        \"\"\"\n        :type edge: List[int]\n        :rtype: None\n        \"\"\"\n        \n\n    def shortestPath(self, node1, node2):\n        \"\"\"\n        :type node1: int\n        :type node2: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Graph object will be instantiated and called as such:\n# obj = Graph(n, edges)\n# obj.addEdge(edge)\n# param_2 = obj.shortestPath(node1,node2)",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Python3",
                    "langSlug": "python3",
                    "code": "class Graph:\n\n    def __init__(self, n: int, edges: List[List[int]]):\n        \n\n    def addEdge(self, edge: List[int]) -> None:\n        \n\n    def shortestPath(self, node1: int, node2: int) -> int:\n        \n\n\n# Your Graph object will be instantiated and called as such:\n# obj = Graph(n, edges)\n# obj.addEdge(edge)\n# param_2 = obj.shortestPath(node1,node2)",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "C",
                    "langSlug": "c",
                    "code": "\n\n\ntypedef struct {\n    \n} Graph;\n\n\nGraph* graphCreate(int n, int** edges, int edgesSize, int* edgesColSize) {\n    \n}\n\nvoid graphAddEdge(Graph* obj, int* edge, int edgeSize) {\n    \n}\n\nint graphShortestPath(Graph* obj, int node1, int node2) {\n    \n}\n\nvoid graphFree(Graph* obj) {\n    \n}\n\n/**\n * Your Graph struct will be instantiated and called as such:\n * Graph* obj = graphCreate(n, edges, edgesSize, edgesColSize);\n * graphAddEdge(obj, edge, edgeSize);\n \n * int param_2 = graphShortestPath(obj, node1, node2);\n \n * graphFree(obj);\n*/",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "C#",
                    "langSlug": "csharp",
                    "code": "public class Graph {\n\n    public Graph(int n, int[][] edges) {\n        \n    }\n    \n    public void AddEdge(int[] edge) {\n        \n    }\n    \n    public int ShortestPath(int node1, int node2) {\n        \n    }\n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * Graph obj = new Graph(n, edges);\n * obj.AddEdge(edge);\n * int param_2 = obj.ShortestPath(node1,node2);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "JavaScript",
                    "langSlug": "javascript",
                    "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n */\nvar Graph = function(n, edges) {\n    \n};\n\n/** \n * @param {number[]} edge\n * @return {void}\n */\nGraph.prototype.addEdge = function(edge) {\n    \n};\n\n/** \n * @param {number} node1 \n * @param {number} node2\n * @return {number}\n */\nGraph.prototype.shortestPath = function(node1, node2) {\n    \n};\n\n/** \n * Your Graph object will be instantiated and called as such:\n * var obj = new Graph(n, edges)\n * obj.addEdge(edge)\n * var param_2 = obj.shortestPath(node1,node2)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "TypeScript",
                    "langSlug": "typescript",
                    "code": "class Graph {\n    constructor(n: number, edges: number[][]) {\n        \n    }\n\n    addEdge(edge: number[]): void {\n        \n    }\n\n    shortestPath(node1: number, node2: number): number {\n        \n    }\n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * var obj = new Graph(n, edges)\n * obj.addEdge(edge)\n * var param_2 = obj.shortestPath(node1,node2)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "PHP",
                    "langSlug": "php",
                    "code": "class Graph {\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     */\n    function __construct($n, $edges) {\n        \n    }\n  \n    /**\n     * @param Integer[] $edge\n     * @return NULL\n     */\n    function addEdge($edge) {\n        \n    }\n  \n    /**\n     * @param Integer $node1\n     * @param Integer $node2\n     * @return Integer\n     */\n    function shortestPath($node1, $node2) {\n        \n    }\n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * $obj = Graph($n, $edges);\n * $obj->addEdge($edge);\n * $ret_2 = $obj->shortestPath($node1, $node2);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Swift",
                    "langSlug": "swift",
                    "code": "\nclass Graph {\n\n    init(_ n: Int, _ edges: [[Int]]) {\n        \n    }\n    \n    func addEdge(_ edge: [Int]) {\n        \n    }\n    \n    func shortestPath(_ node1: Int, _ node2: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * let obj = Graph(n, edges)\n * obj.addEdge(edge)\n * let ret_2: Int = obj.shortestPath(node1, node2)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Kotlin",
                    "langSlug": "kotlin",
                    "code": "class Graph(n: Int, edges: Array<IntArray>) {\n\n    fun addEdge(edge: IntArray) {\n        \n    }\n\n    fun shortestPath(node1: Int, node2: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * var obj = Graph(n, edges)\n * obj.addEdge(edge)\n * var param_2 = obj.shortestPath(node1,node2)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Dart",
                    "langSlug": "dart",
                    "code": "class Graph {\n\n  Graph(int n, List<List<int>> edges) {\n    \n  }\n  \n  void addEdge(List<int> edge) {\n    \n  }\n  \n  int shortestPath(int node1, int node2) {\n    \n  }\n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * Graph obj = Graph(n, edges);\n * obj.addEdge(edge);\n * int param2 = obj.shortestPath(node1,node2);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Go",
                    "langSlug": "golang",
                    "code": "type Graph struct {\n    \n}\n\n\nfunc Constructor(n int, edges [][]int) Graph {\n    \n}\n\n\nfunc (this *Graph) AddEdge(edge []int)  {\n    \n}\n\n\nfunc (this *Graph) ShortestPath(node1 int, node2 int) int {\n    \n}\n\n\n/**\n * Your Graph object will be instantiated and called as such:\n * obj := Constructor(n, edges);\n * obj.AddEdge(edge);\n * param_2 := obj.ShortestPath(node1,node2);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Ruby",
                    "langSlug": "ruby",
                    "code": "class Graph\n\n=begin\n    :type n: Integer\n    :type edges: Integer[][]\n=end\n    def initialize(n, edges)\n        \n    end\n\n\n=begin\n    :type edge: Integer[]\n    :rtype: Void\n=end\n    def add_edge(edge)\n        \n    end\n\n\n=begin\n    :type node1: Integer\n    :type node2: Integer\n    :rtype: Integer\n=end\n    def shortest_path(node1, node2)\n        \n    end\n\n\nend\n\n# Your Graph object will be instantiated and called as such:\n# obj = Graph.new(n, edges)\n# obj.add_edge(edge)\n# param_2 = obj.shortest_path(node1, node2)",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Scala",
                    "langSlug": "scala",
                    "code": "class Graph(_n: Int, _edges: Array[Array[Int]]) {\n\n    def addEdge(edge: Array[Int]) {\n        \n    }\n\n    def shortestPath(node1: Int, node2: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * var obj = new Graph(n, edges)\n * obj.addEdge(edge)\n * var param_2 = obj.shortestPath(node1,node2)\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Rust",
                    "langSlug": "rust",
                    "code": "struct Graph {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Graph {\n\n    fn new(n: i32, edges: Vec<Vec<i32>>) -> Self {\n        \n    }\n    \n    fn add_edge(&self, edge: Vec<i32>) {\n        \n    }\n    \n    fn shortest_path(&self, node1: i32, node2: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * let obj = Graph::new(n, edges);\n * obj.add_edge(edge);\n * let ret_2: i32 = obj.shortest_path(node1, node2);\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Racket",
                    "langSlug": "racket",
                    "code": "(define graph%\n  (class object%\n    (super-new)\n    \n    ; n : exact-integer?\n    ; edges : (listof (listof exact-integer?))\n    (init-field\n      n\n      edges)\n    \n    ; add-edge : (listof exact-integer?) -> void?\n    (define/public (add-edge edge)\n      )\n    ; shortest-path : exact-integer? exact-integer? -> exact-integer?\n    (define/public (shortest-path node1 node2)\n      )))\n\n;; Your graph% object will be instantiated and called as such:\n;; (define obj (new graph% [n n] [edges edges]))\n;; (send obj add-edge edge)\n;; (define param_2 (send obj shortest-path node1 node2))",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Erlang",
                    "langSlug": "erlang",
                    "code": "-spec graph_init_(N :: integer(), Edges :: [[integer()]]) -> any().\ngraph_init_(N, Edges) ->\n  .\n\n-spec graph_add_edge(Edge :: [integer()]) -> any().\ngraph_add_edge(Edge) ->\n  .\n\n-spec graph_shortest_path(Node1 :: integer(), Node2 :: integer()) -> integer().\ngraph_shortest_path(Node1, Node2) ->\n  .\n\n\n%% Your functions will be called as such:\n%% graph_init_(N, Edges),\n%% graph_add_edge(Edge),\n%% Param_2 = graph_shortest_path(Node1, Node2),\n\n%% graph_init_ will be called before every test case, in which you can do some necessary initializations.",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Elixir",
                    "langSlug": "elixir",
                    "code": "defmodule Graph do\n  @spec init_(n :: integer, edges :: [[integer]]) :: any\n  def init_(n, edges) do\n    \n  end\n\n  @spec add_edge(edge :: [integer]) :: any\n  def add_edge(edge) do\n    \n  end\n\n  @spec shortest_path(node1 :: integer, node2 :: integer) :: integer\n  def shortest_path(node1, node2) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Graph.init_(n, edges)\n# Graph.add_edge(edge)\n# param_2 = Graph.shortest_path(node1, node2)\n\n# Graph.init_ will be called before every test case, in which you can do some necessary initializations.",
                    "__typename": "CodeSnippetNode"
                }
            ],
            "stats": "{\"totalAccepted\": \"60.8K\", \"totalSubmission\": \"85.5K\", \"totalAcceptedRaw\": 60771, \"totalSubmissionRaw\": 85506, \"acRate\": \"71.1%\"}",
            "hints": [
                "After adding each edge, update your graph with the new edge, and you can calculate the shortest path in your graph each time the shortestPath method is called.",
                "Use dijkstra’s algorithm to calculate the shortest paths."
            ],
            "solution": {
                "id": "2098",
                "canSeeDetail": true,
                "paidOnly": false,
                "hasVideoSolution": false,
                "paidOnlyVideo": true,
                "__typename": "ArticleNode"
            },
            "status": null,
            "sampleTestCase": "[\"Graph\",\"shortestPath\",\"shortestPath\",\"addEdge\",\"shortestPath\"]\n[[4,[[0,2,5],[0,1,2],[1,2,1],[3,0,3]]],[3,2],[0,3],[[1,3,4]],[0,3]]",
            "metaData": "{\n  \"classname\": \"Graph\",\n  \"constructor\": {\n    \"params\": [\n      {\n        \"type\": \"integer\",\n        \"name\": \"n\"\n      },\n      {\n        \"name\": \"edges\",\n        \"type\": \"integer[][]\"\n      }\n    ]\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"integer[]\",\n          \"name\": \"edge\"\n        }\n      ],\n      \"name\": \"addEdge\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"node1\"\n        },\n        {\n          \"type\": \"integer\",\n          \"name\": \"node2\"\n        }\n      ],\n      \"name\": \"shortestPath\",\n      \"return\": {\n        \"type\": \"integer\"\n      }\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"systemdesign\": true\n}",
            "judgerAvailable": true,
            "judgeType": "large",
            "mysqlSchemas": [],
            "enableRunCode": true,
            "enableTestMode": false,
            "enableDebugger": true,
            "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 20 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>OpenJDK 17</code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-10\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use 5.3.0 version of <a href=\\\"https://github.com/datastructures-js/priority-queue/tree/fb4fdb984834421279aeb081df7af624d17c2a03\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and 4.2.1 version of <a href=\\\"https://github.com/datastructures-js/queue/tree/e63563025a5a805aa16928cb53bcd517bfea9230\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.21</code></p>\\r\\n<p>Support <a href=\\\"https://github.com/emirpasic/gods/tree/v1.18.1\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods@v1.18.1</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.9.0</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 5.1.6, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2022 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 25.0\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.4 with Erlang/OTP 25.0\"], \"dart\": [\"Dart\", \"<p>Dart 2.17.3</p>\\r\\n\\r\\n<p>Your code will be run directly without compiling</p>\"]}",
            "libraryUrl": null,
            "adminUrl": null,
            "challengeQuestion": {
                "id": "1548",
                "date": "2023-11-11",
                "incompleteChallengeCount": 0,
                "streakCount": 0,
                "type": "DAILY",
                "__typename": "ChallengeQuestionNode"
            },
            "__typename": "QuestionNode"
        }
    }
}