{
    "data": {
        "question": {
            "questionId": "2774",
            "questionFrontendId": "2700",
            "categoryTitle": "JavaScript",
            "boundTopicId": 2278876,
            "title": "Differences Between Two Objects",
            "titleSlug": "differences-between-two-objects",
            "content": "<p>Write a function that accepts two deeply nested objects or arrays&nbsp;<code>obj1</code> and&nbsp;<code>obj2</code>&nbsp;and returns a new&nbsp;object representing their differences.</p>\n\n<p>The function should compare the properties of the two objects and identify any changes.&nbsp;The returned object should only contains keys where the value is different from&nbsp;<code>obj1</code> to&nbsp;<code>obj2</code>. For each changed key, the value should be represented as an&nbsp;array <code>[obj1 value, obj2&nbsp;value]</code>. Keys that exist in one object but not in the other should not be included in the returned object. When comparing two arrays, the indices of the arrays are considered to be their keys.&nbsp;The end result should be a deeply nested object where each leaf value is a difference array.</p>\n\n<p>You may assume that both objects are the output of <code>JSON.parse</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj1 = {}\nobj2 = {\n&nbsp; &quot;a&quot;: 1, \n  &quot;b&quot;: 2\n}\n<strong>Output:</strong> {}\n<strong>Explanation:</strong> There were no modifications made to obj1. New keys &quot;a&quot; and &quot;b&quot; appear in obj2, but keys that are added or removed should be ignored.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj1 = {\n&nbsp; &quot;a&quot;: 1,\n&nbsp; &quot;v&quot;: 3,\n&nbsp; &quot;x&quot;: [],\n&nbsp; &quot;z&quot;: {\n&nbsp; &nbsp; &quot;a&quot;: null\n&nbsp; }\n}\nobj2 = {\n&nbsp; &quot;a&quot;: 2,\n&nbsp; &quot;v&quot;: 4,\n&nbsp; &quot;x&quot;: [],\n&nbsp; &quot;z&quot;: {\n&nbsp; &nbsp; &quot;a&quot;: 2\n&nbsp; }\n}\n<strong>Output:</strong> \n{\n&nbsp; &quot;a&quot;: [1, 2],\n  &quot;v&quot;: [3, 4],\n&nbsp; &quot;z&quot;: {\n&nbsp;   &quot;a&quot;: [null, 2]\n&nbsp; }\n}\n<strong>Explanation:</strong> The keys &quot;a&quot;, &quot;v&quot;, and &quot;z&quot; all had changes applied. &quot;a&quot; was chnaged from 1 to 2. &quot;v&quot; was changed from 3 to 4. &quot;z&quot; had a change applied to a child object. &quot;z.a&quot; was changed from null to 2.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj1 = {\n&nbsp; &quot;a&quot;: 5, \n&nbsp; &quot;v&quot;: 6, \n&nbsp; &quot;z&quot;: [1, 2, 4, [2, 5, 7]]\n}\nobj2 = {\n&nbsp; &quot;a&quot;: 5, \n&nbsp; &quot;v&quot;: 7, \n&nbsp; &quot;z&quot;: [1, 2, 3, [1]]\n}\n<strong>Output:</strong> \n{\n&nbsp; &quot;v&quot;: [6, 7],\n&nbsp; &quot;z&quot;: {\n&nbsp;   &quot;2&quot;: [4, 3],\n&nbsp;   &quot;3&quot;: {\n&nbsp;     &quot;0&quot;: [2, 1]\n&nbsp;   }\n&nbsp; }\n}\n<strong>Explanation:</strong> In obj1 and obj2, the keys &quot;v&quot; and &quot;z&quot; have different assigned values. &quot;a&quot; is ignored because the value is unchanged. In the key &quot;z&quot;, there is a nested array. Arrays are treated like objects where the indices are keys. There were two alterations to the the array: z[2] and z[3][0]. z[0] and z[1] were unchanged and thus not included. z[3][1] and z[3][2] were removed and thus not included.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj1 = {\n&nbsp; &quot;a&quot;: {&quot;b&quot;: 1}, \n}\nobj2 = {\n&nbsp; &quot;a&quot;: [5],\n}\n<strong>Output:</strong> \n{\n  &quot;a&quot;: [{&quot;b&quot;: 1}, [5]]\n}\n<strong>Explanation:</strong> The key &quot;a&quot; exists in both objects. Since the two associated values have different types, they are placed in the difference array.</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nobj1 = {\n&nbsp; &quot;a&quot;: [1, 2, {}], \n&nbsp; &quot;b&quot;: false\n}\nobj2 = { &nbsp; \n&nbsp; &quot;b&quot;: false,\n&nbsp; &quot;a&quot;: [1, 2, {}]\n}\n<strong>Output:</strong> \n{}\n<strong>Explanation:</strong> Apart from a different ordering of keys, the two objects are identical so an empty object is returned.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= JSON.stringify(obj1).length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>2 &lt;= JSON.stringify(obj2).length &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "translatedTitle": "两个对象之间的差异",
            "translatedContent": "<p>请你编写一个函数，它接收两个深度嵌套的对象或数组 <code>obj1</code> 和 <code>obj2</code> ，并返回一个新对象表示它们之间差异。</p>\n\n<p>该函数应该比较这两个对象的属性，并识别任何变化。返回的对象应仅包含从 <code>obj1</code> 到 <code>obj2</code> 的值不同的键。对于每个变化的键，值应表示为一个数组 <code>[obj1 value, obj2 value]</code> 。不存在于一个对象中但存在于另一个对象中的键不应包含在返回的对象中。在比较两个数组时，数组的索引被视为它们的键。最终结果应是一个深度嵌套的对象，其中每个叶子的值都是一个差异数组。</p>\n\n<p>你可以假设这两个对象都是 <code>JSON.parse</code> 的输出结果。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong> \nobj1 = {}\nobj2 = {\n&nbsp; \"a\": 1, \n  \"b\": 2\n}\n<b>输出：</b>{}\n<b>解释：</b>obj1没有进行任何修改。obj2中出现了新的键 \"a\" 和 \"b\" ，但添加或删除的键应该被忽略。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>\nobj1 = {\n&nbsp; \"a\": 1,\n&nbsp; \"v\": 3,\n&nbsp; \"x\": [],\n&nbsp; \"z\": {\n&nbsp; &nbsp; \"a\": null\n&nbsp; }\n}\nobj2 = {\n&nbsp; \"a\": 2,\n&nbsp; \"v\": 4,\n&nbsp; \"x\": [],\n&nbsp; \"z\": {\n&nbsp; &nbsp; \"a\": 2\n&nbsp; }\n}\n<b>输出：</b>\n{\n&nbsp; \"a\": [1, 2],\n  \"v\": [3, 4],\n&nbsp; \"z\": {\n&nbsp;   \"a\": [null, 2]\n&nbsp; }\n}\n<b>解释：</b>键 \"a\"、\"v\" 和 \"z\" 都有变化。\"a\" 从 1 变为 2，\"v\" 从 3 变为 4 ，\"z\" 的子对象 \"a\" 从 null 变为 2。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>\nobj1 = {\n&nbsp; \"a\": 5, \n&nbsp; \"v\": 6, \n&nbsp; \"z\": [1, 2, 4, [2, 5, 7]]\n}\nobj2 = {\n&nbsp; \"a\": 5, \n&nbsp; \"v\": 7, \n&nbsp; \"z\": [1, 2, 3, [1]]\n}\n<b>输出：</b>\n{\n&nbsp; \"v\": [6, 7],\n&nbsp; \"z\": {\n&nbsp;   \"2\": [4, 3],\n&nbsp;   \"3\": {\n&nbsp;     \"0\": [2, 1]\n&nbsp;   }\n&nbsp; }\n}\n<b>解释：</b>在 obj1 和 obj2 中，键 \"v\" 和 \"z\" 的值不同。\"a\" 被忽略，因为值没有变化。在键 \"z\" 中，有一个嵌套的数组。数组被视为对象，其中索引被视为键。数组发生了两处变化：z[2] 和 z[3][0]。z[0] 和 z[1] 没有变化，因此没有包含在结果中。z[3][1] 和 z[3][2] 被删除，因此也没有包含在结果中。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<b>输入：</b>\nobj1 = {\n&nbsp; \"a\": {\"b\": 1}, \n}\nobj2 = {\n&nbsp; \"a\": [5],\n}\n<b>输出：</b>\n{\n  \"a\": [{\"b\": 1}, [5]]\n}\n<b>解释：</b>键 \"a\" 在两个对象中都存在。但由于两个相关值具有不同的类型，所以它们被放置在差异数组中。</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre>\n<b>输入：</b>\nobj1 = {\n&nbsp; \"a\": [1, 2, {}], \n&nbsp; \"b\": false\n}\nobj2 = { &nbsp; \n&nbsp; \"b\": false,\n&nbsp; \"a\": [1, 2, {}]\n}\n<b>输出：</b>\n{}\n<b>解释：</b>除了键的顺序不同之外，两个对象是相同的，因此返回一个空对象。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= JSON.stringify(obj1).length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>2 &lt;= JSON.stringify(obj2).length &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": 0,
            "isLiked": null,
            "similarQuestions": "[]",
            "contributors": [],
            "langToValidPlayground": "{\"cpp\": true, \"java\": true, \"python\": true, \"python3\": true, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false, \"typescript\": false, \"racket\": false, \"erlang\": false, \"elixir\": false, \"dart\": false}",
            "topicTags": [],
            "companyTagStats": null,
            "codeSnippets": [
                {
                    "lang": "JavaScript",
                    "langSlug": "javascript",
                    "code": "/**\n * @param {object} obj1\n * @param {object} obj2\n * @return {object}\n */\nfunction objDiff(obj1, obj2) {\n    \n};",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "TypeScript",
                    "langSlug": "typescript",
                    "code": "function objDiff(obj1: any, obj2: any): any {\n\n};",
                    "__typename": "CodeSnippetNode"
                }
            ],
            "stats": "{\"totalAccepted\": \"349\", \"totalSubmission\": \"596\", \"totalAcceptedRaw\": 349, \"totalSubmissionRaw\": 596, \"acRate\": \"58.6%\"}",
            "hints": [
                "Find the intersection of the keys/indices on the two arrays/objects.",
                "Analyze the data structure recursively.",
                "For each key in the intersection, omit if there are no differences in the leaves. Otherwise return the difference."
            ],
            "solution": null,
            "status": null,
            "sampleTestCase": "{}\n{\"a\": 1, \"b\": 2}",
            "metaData": "{\n  \"name\": \"objDiff\",\n  \"params\": [\n    {\n      \"name\": \"obj1\",\n      \"type\": \"string\"\n    },\n    {\n      \"type\": \"string\",\n      \"name\": \"obj2\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"languages\": [\n    \"javascript\",\n    \"typescript\"\n  ],\n  \"manual\": true\n}",
            "judgerAvailable": true,
            "judgeType": "large",
            "mysqlSchemas": [],
            "enableRunCode": true,
            "envInfo": "{\"javascript\":[\"JavaScript\",\"<p>\\u7248\\u672c\\uff1a<code>Node.js 16.13.2<\\/code><\\/p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u6267\\u884c\\u65f6\\u5c06\\u5e26\\u4e0a <code>--harmony<\\/code> \\u6807\\u8bb0\\u6765\\u5f00\\u542f <a href=\\\"http:\\/\\/node.green\\/\\\" target=\\\"_blank\\\">\\u65b0\\u7248ES6\\u7279\\u6027<\\/a>\\u3002<\\/p>\\r\\n\\r\\n<p><a href=\\\"https:\\/\\/lodash.com\\\" target=\\\"_blank\\\">lodash.js<\\/a> \\u5e93\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5305\\u542b\\u3002<\\/p>\\r\\n\\r\\n<p> \\u5982\\u9700\\u4f7f\\u7528\\u961f\\u5217\\/\\u4f18\\u5148\\u961f\\u5217\\uff0c\\u60a8\\u53ef\\u4f7f\\u7528 <a href=\\\"https:\\/\\/github.com\\/datastructures-js\\/priority-queue\\/tree\\/fb4fdb984834421279aeb081df7af624d17c2a03\\\" target=\\\"_blank\\\"> datastructures-js\\/priority-queue@5.3.0<\\/a> \\u548c <a href=\\\"https:\\/\\/github.com\\/datastructures-js\\/queue\\/tree\\/e63563025a5a805aa16928cb53bcd517bfea9230\\\" target=\\\"_blank\\\"> datastructures-js\\/queue@4.2.1<\\/a>\\u3002<\\/p>\"],\"typescript\":[\"TypeScript\",\"<p>TypeScript 4.5.4<\\/p>\\r\\n\\r\\n<p>Compile Options: --alwaysStrict --strictBindCallApply --strictFunctionTypes --target ES2020<\\/p>\\r\\n\\r\\n<p><a href=\\\"https:\\/\\/lodash.com\\\" target=\\\"_blank\\\">lodash.js<\\/a> \\u5e93\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5305\\u542b\\u3002<\\/p>\\r\\n\\r\\n<p> \\u5982\\u9700\\u4f7f\\u7528\\u961f\\u5217\\/\\u4f18\\u5148\\u961f\\u5217\\uff0c\\u60a8\\u53ef\\u4f7f\\u7528 <a href=\\\"https:\\/\\/github.com\\/datastructures-js\\/priority-queue\\/tree\\/fb4fdb984834421279aeb081df7af624d17c2a03\\\" target=\\\"_blank\\\"> datastructures-js\\/priority-queue@5.3.0<\\/a> \\u548c <a href=\\\"https:\\/\\/github.com\\/datastructures-js\\/queue\\/tree\\/e63563025a5a805aa16928cb53bcd517bfea9230\\\" target=\\\"_blank\\\"> datastructures-js\\/queue@4.2.1<\\/a>\\u3002<\\/p>\"]}",
            "book": null,
            "isSubscribed": false,
            "isDailyQuestion": false,
            "dailyRecordStatus": null,
            "editorType": "CKEDITOR",
            "ugcQuestionId": null,
            "style": "LEETCODE",
            "exampleTestcases": "{}\n{\"a\": 1, \"b\": 2}\n{\"a\": 1, \"v\": 3, \"x\": [], \"z\": {\"a\": null}}\n{\"a\": 2, \"v\": 4, \"x\": [], \"z\": {\"a\": 2}}\n{\"a\": 5, \"v\": 6, \"z\": [1,2,4, [2,5,7]]}\n{\"a\": 5, \"v\": 7, \"z\": [1,2,3, [1]]}\n{\"a\":{\"b\":1}}\n{\"a\":[5]}\n{\"a\": [1, 2, {}],\"b\": false}\n{\"b\": false, \"a\": [1, 2, {}]}",
            "__typename": "QuestionNode"
        }
    }
}