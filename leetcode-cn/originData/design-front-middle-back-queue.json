{
    "data": {
        "question": {
            "questionId": "1767",
            "questionFrontendId": "1670",
            "categoryTitle": "Algorithms",
            "boundTopicId": 499831,
            "title": "Design Front Middle Back Queue",
            "titleSlug": "design-front-middle-back-queue",
            "content": "<p>Design a queue that supports <code>push</code> and <code>pop</code> operations in the front, middle, and back.</p>\n\n<p>Implement the <code>FrontMiddleBack</code> class:</p>\n\n<ul>\n\t<li><code>FrontMiddleBack()</code> Initializes the queue.</li>\n\t<li><code>void pushFront(int val)</code> Adds <code>val</code> to the <strong>front</strong> of the queue.</li>\n\t<li><code>void pushMiddle(int val)</code> Adds <code>val</code> to the <strong>middle</strong> of the queue.</li>\n\t<li><code>void pushBack(int val)</code> Adds <code>val</code> to the <strong>back</strong> of the queue.</li>\n\t<li><code>int popFront()</code> Removes the <strong>front</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li>\n\t<li><code>int popMiddle()</code> Removes the <strong>middle</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li>\n\t<li><code>int popBack()</code> Removes the <strong>back</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li>\n</ul>\n\n<p><strong>Notice</strong> that when there are <b>two</b> middle position choices, the operation is performed on the <strong>frontmost</strong> middle position choice. For example:</p>\n\n<ul>\n\t<li>Pushing <code>6</code> into the middle of <code>[1, 2, 3, 4, 5]</code> results in <code>[1, 2, <u>6</u>, 3, 4, 5]</code>.</li>\n\t<li>Popping the middle from <code>[1, 2, <u>3</u>, 4, 5, 6]</code> returns <code>3</code> and results in <code>[1, 2, 4, 5, 6]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong>\n[&quot;FrontMiddleBackQueue&quot;, &quot;pushFront&quot;, &quot;pushBack&quot;, &quot;pushMiddle&quot;, &quot;pushMiddle&quot;, &quot;popFront&quot;, &quot;popMiddle&quot;, &quot;popMiddle&quot;, &quot;popBack&quot;, &quot;popFront&quot;]\n[[], [1], [2], [3], [4], [], [], [], [], []]\n<strong>Output:</strong>\n[null, null, null, null, null, 1, 3, 4, 2, -1]\n\n<strong>Explanation:</strong>\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // [<u>1</u>]\nq.pushBack(2);    // [1, <u>2</u>]\nq.pushMiddle(3);  // [1, <u>3</u>, 2]\nq.pushMiddle(4);  // [1, <u>4</u>, 3, 2]\nq.popFront();     // return 1 -&gt; [4, 3, 2]\nq.popMiddle();    // return 3 -&gt; [4, 2]\nq.popMiddle();    // return 4 -&gt; [2]\nq.popBack();      // return 2 -&gt; []\nq.popFront();     // return -1 -&gt; [] (The queue is empty)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= val &lt;= 10<sup>9</sup></code></li>\n\t<li>At most&nbsp;<code>1000</code>&nbsp;calls will be made to&nbsp;<code>pushFront</code>,&nbsp;<code>pushMiddle</code>,&nbsp;<code>pushBack</code>, <code>popFront</code>, <code>popMiddle</code>, and <code>popBack</code>.</li>\n</ul>\n",
            "translatedTitle": "设计前中后队列",
            "translatedContent": "<p>请你设计一个队列，支持在前，中，后三个位置的 <code>push</code> 和 <code>pop</code> 操作。</p>\n\n<p>请你完成 <code>FrontMiddleBack</code> 类：</p>\n\n<ul>\n\t<li><code>FrontMiddleBack()</code> 初始化队列。</li>\n\t<li><code>void pushFront(int val)</code> 将 <code>val</code> 添加到队列的 <strong>最前面</strong> 。</li>\n\t<li><code>void pushMiddle(int val)</code> 将 <code>val</code> 添加到队列的 <strong>正中间</strong> 。</li>\n\t<li><code>void pushBack(int val)</code> 将 <code>val</code> 添加到队里的 <strong>最后面</strong> 。</li>\n\t<li><code>int popFront()</code> 将 <strong>最前面</strong> 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code> 。</li>\n\t<li><code>int popMiddle()</code> 将 <b>正中间</b> 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code> 。</li>\n\t<li><code>int popBack()</code> 将 <strong>最后面</strong> 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code> 。</li>\n</ul>\n\n<p>请注意当有 <strong>两个</strong> 中间位置的时候，选择靠前面的位置进行操作。比方说：</p>\n\n<ul>\n\t<li>将 <code>6</code> 添加到 <code>[1, 2, 3, 4, 5]</code> 的中间位置，结果数组为 <code>[1, 2, <strong>6</strong>, 3, 4, 5]</code> 。</li>\n\t<li>从 <code>[1, 2, <strong>3</strong>, 4, 5, 6]</code> 的中间位置弹出元素，返回 <code>3</code> ，数组变为 <code>[1, 2, 4, 5, 6]</code> 。</li>\n</ul>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>\n[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n[[], [1], [2], [3], [4], [], [], [], [], []]\n<strong>输出：</strong>\n[null, null, null, null, null, 1, 3, 4, 2, -1]\n\n<strong>解释：</strong>\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // [<strong>1</strong>]\nq.pushBack(2);    // [1, <strong>2</strong>]\nq.pushMiddle(3);  // [1, <strong>3</strong>, 2]\nq.pushMiddle(4);  // [1, <strong>4</strong>, 3, 2]\nq.popFront();     // 返回 1 -> [4, 3, 2]\nq.popMiddle();    // 返回 3 -> [4, 2]\nq.popMiddle();    // 返回 4 -> [2]\nq.popBack();      // 返回 2 -> []\nq.popFront();     // 返回 -1 -> [] （队列为空）\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= val <= 10<sup>9</sup></code></li>\n\t<li>最多调用 <code>1000</code> 次 <code>pushFront</code>， <code>pushMiddle</code>， <code>pushBack</code>， <code>popFront</code>， <code>popMiddle</code> 和 <code>popBack</code> 。</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 106,
            "dislikes": 0,
            "isLiked": null,
            "similarQuestions": "[{\"title\": \"Design Circular Deque\", \"titleSlug\": \"design-circular-deque\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u8bbe\\u8ba1\\u5faa\\u73af\\u53cc\\u7aef\\u961f\\u5217\", \"isPaidOnly\": false}, {\"title\": \"Design Circular Queue\", \"titleSlug\": \"design-circular-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": \"\\u8bbe\\u8ba1\\u5faa\\u73af\\u961f\\u5217\", \"isPaidOnly\": false}]",
            "contributors": [],
            "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python3\": false, \"python\": false, \"javascript\": false, \"typescript\": false, \"csharp\": false, \"c\": false, \"golang\": false, \"kotlin\": false, \"swift\": false, \"rust\": false, \"ruby\": false, \"php\": false, \"dart\": false, \"scala\": false, \"elixir\": false, \"erlang\": false, \"racket\": false, \"cangjie\": false, \"bash\": false, \"html\": false, \"pythonml\": false, \"react\": false, \"vanillajs\": false, \"mysql\": false, \"mssql\": false, \"postgresql\": false, \"oraclesql\": false, \"pythondata\": false}",
            "topicTags": [
                {
                    "name": "Design",
                    "slug": "design",
                    "translatedName": "设计",
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Queue",
                    "slug": "queue",
                    "translatedName": "队列",
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Array",
                    "slug": "array",
                    "translatedName": "数组",
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list",
                    "translatedName": "链表",
                    "__typename": "TopicTagNode"
                },
                {
                    "name": "Data Stream",
                    "slug": "data-stream",
                    "translatedName": "数据流",
                    "__typename": "TopicTagNode"
                }
            ],
            "companyTagStats": null,
            "codeSnippets": [
                {
                    "lang": "C++",
                    "langSlug": "cpp",
                    "code": "class FrontMiddleBackQueue {\npublic:\n    FrontMiddleBackQueue() {\n        \n    }\n    \n    void pushFront(int val) {\n        \n    }\n    \n    void pushMiddle(int val) {\n        \n    }\n    \n    void pushBack(int val) {\n        \n    }\n    \n    int popFront() {\n        \n    }\n    \n    int popMiddle() {\n        \n    }\n    \n    int popBack() {\n        \n    }\n};\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * FrontMiddleBackQueue* obj = new FrontMiddleBackQueue();\n * obj->pushFront(val);\n * obj->pushMiddle(val);\n * obj->pushBack(val);\n * int param_4 = obj->popFront();\n * int param_5 = obj->popMiddle();\n * int param_6 = obj->popBack();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Java",
                    "langSlug": "java",
                    "code": "class FrontMiddleBackQueue {\n\n    public FrontMiddleBackQueue() {\n        \n    }\n    \n    public void pushFront(int val) {\n        \n    }\n    \n    public void pushMiddle(int val) {\n        \n    }\n    \n    public void pushBack(int val) {\n        \n    }\n    \n    public int popFront() {\n        \n    }\n    \n    public int popMiddle() {\n        \n    }\n    \n    public int popBack() {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * FrontMiddleBackQueue obj = new FrontMiddleBackQueue();\n * obj.pushFront(val);\n * obj.pushMiddle(val);\n * obj.pushBack(val);\n * int param_4 = obj.popFront();\n * int param_5 = obj.popMiddle();\n * int param_6 = obj.popBack();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Python3",
                    "langSlug": "python3",
                    "code": "class FrontMiddleBackQueue:\n\n    def __init__(self):\n        \n\n    def pushFront(self, val: int) -> None:\n        \n\n    def pushMiddle(self, val: int) -> None:\n        \n\n    def pushBack(self, val: int) -> None:\n        \n\n    def popFront(self) -> int:\n        \n\n    def popMiddle(self) -> int:\n        \n\n    def popBack(self) -> int:\n        \n\n\n# Your FrontMiddleBackQueue object will be instantiated and called as such:\n# obj = FrontMiddleBackQueue()\n# obj.pushFront(val)\n# obj.pushMiddle(val)\n# obj.pushBack(val)\n# param_4 = obj.popFront()\n# param_5 = obj.popMiddle()\n# param_6 = obj.popBack()",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Python",
                    "langSlug": "python",
                    "code": "class FrontMiddleBackQueue(object):\n\n    def __init__(self):\n        \n\n    def pushFront(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pushMiddle(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pushBack(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def popFront(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def popMiddle(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def popBack(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your FrontMiddleBackQueue object will be instantiated and called as such:\n# obj = FrontMiddleBackQueue()\n# obj.pushFront(val)\n# obj.pushMiddle(val)\n# obj.pushBack(val)\n# param_4 = obj.popFront()\n# param_5 = obj.popMiddle()\n# param_6 = obj.popBack()",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "JavaScript",
                    "langSlug": "javascript",
                    "code": "\nvar FrontMiddleBackQueue = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFrontMiddleBackQueue.prototype.pushFront = function(val) {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFrontMiddleBackQueue.prototype.pushMiddle = function(val) {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFrontMiddleBackQueue.prototype.pushBack = function(val) {\n    \n};\n\n/**\n * @return {number}\n */\nFrontMiddleBackQueue.prototype.popFront = function() {\n    \n};\n\n/**\n * @return {number}\n */\nFrontMiddleBackQueue.prototype.popMiddle = function() {\n    \n};\n\n/**\n * @return {number}\n */\nFrontMiddleBackQueue.prototype.popBack = function() {\n    \n};\n\n/** \n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * var obj = new FrontMiddleBackQueue()\n * obj.pushFront(val)\n * obj.pushMiddle(val)\n * obj.pushBack(val)\n * var param_4 = obj.popFront()\n * var param_5 = obj.popMiddle()\n * var param_6 = obj.popBack()\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "TypeScript",
                    "langSlug": "typescript",
                    "code": "class FrontMiddleBackQueue {\n    constructor() {\n        \n    }\n\n    pushFront(val: number): void {\n        \n    }\n\n    pushMiddle(val: number): void {\n        \n    }\n\n    pushBack(val: number): void {\n        \n    }\n\n    popFront(): number {\n        \n    }\n\n    popMiddle(): number {\n        \n    }\n\n    popBack(): number {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * var obj = new FrontMiddleBackQueue()\n * obj.pushFront(val)\n * obj.pushMiddle(val)\n * obj.pushBack(val)\n * var param_4 = obj.popFront()\n * var param_5 = obj.popMiddle()\n * var param_6 = obj.popBack()\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "C#",
                    "langSlug": "csharp",
                    "code": "public class FrontMiddleBackQueue {\n\n    public FrontMiddleBackQueue() {\n        \n    }\n    \n    public void PushFront(int val) {\n        \n    }\n    \n    public void PushMiddle(int val) {\n        \n    }\n    \n    public void PushBack(int val) {\n        \n    }\n    \n    public int PopFront() {\n        \n    }\n    \n    public int PopMiddle() {\n        \n    }\n    \n    public int PopBack() {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * FrontMiddleBackQueue obj = new FrontMiddleBackQueue();\n * obj.PushFront(val);\n * obj.PushMiddle(val);\n * obj.PushBack(val);\n * int param_4 = obj.PopFront();\n * int param_5 = obj.PopMiddle();\n * int param_6 = obj.PopBack();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "C",
                    "langSlug": "c",
                    "code": "\n\n\ntypedef struct {\n    \n} FrontMiddleBackQueue;\n\n\nFrontMiddleBackQueue* frontMiddleBackQueueCreate() {\n    \n}\n\nvoid frontMiddleBackQueuePushFront(FrontMiddleBackQueue* obj, int val) {\n    \n}\n\nvoid frontMiddleBackQueuePushMiddle(FrontMiddleBackQueue* obj, int val) {\n    \n}\n\nvoid frontMiddleBackQueuePushBack(FrontMiddleBackQueue* obj, int val) {\n    \n}\n\nint frontMiddleBackQueuePopFront(FrontMiddleBackQueue* obj) {\n    \n}\n\nint frontMiddleBackQueuePopMiddle(FrontMiddleBackQueue* obj) {\n    \n}\n\nint frontMiddleBackQueuePopBack(FrontMiddleBackQueue* obj) {\n    \n}\n\nvoid frontMiddleBackQueueFree(FrontMiddleBackQueue* obj) {\n    \n}\n\n/**\n * Your FrontMiddleBackQueue struct will be instantiated and called as such:\n * FrontMiddleBackQueue* obj = frontMiddleBackQueueCreate();\n * frontMiddleBackQueuePushFront(obj, val);\n \n * frontMiddleBackQueuePushMiddle(obj, val);\n \n * frontMiddleBackQueuePushBack(obj, val);\n \n * int param_4 = frontMiddleBackQueuePopFront(obj);\n \n * int param_5 = frontMiddleBackQueuePopMiddle(obj);\n \n * int param_6 = frontMiddleBackQueuePopBack(obj);\n \n * frontMiddleBackQueueFree(obj);\n*/",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Go",
                    "langSlug": "golang",
                    "code": "type FrontMiddleBackQueue struct {\n    \n}\n\n\nfunc Constructor() FrontMiddleBackQueue {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PushFront(val int)  {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PushMiddle(val int)  {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PushBack(val int)  {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PopFront() int {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PopMiddle() int {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PopBack() int {\n    \n}\n\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * obj := Constructor();\n * obj.PushFront(val);\n * obj.PushMiddle(val);\n * obj.PushBack(val);\n * param_4 := obj.PopFront();\n * param_5 := obj.PopMiddle();\n * param_6 := obj.PopBack();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Kotlin",
                    "langSlug": "kotlin",
                    "code": "class FrontMiddleBackQueue() {\n\n    fun pushFront(`val`: Int) {\n        \n    }\n\n    fun pushMiddle(`val`: Int) {\n        \n    }\n\n    fun pushBack(`val`: Int) {\n        \n    }\n\n    fun popFront(): Int {\n        \n    }\n\n    fun popMiddle(): Int {\n        \n    }\n\n    fun popBack(): Int {\n        \n    }\n\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * var obj = FrontMiddleBackQueue()\n * obj.pushFront(`val`)\n * obj.pushMiddle(`val`)\n * obj.pushBack(`val`)\n * var param_4 = obj.popFront()\n * var param_5 = obj.popMiddle()\n * var param_6 = obj.popBack()\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Swift",
                    "langSlug": "swift",
                    "code": "\nclass FrontMiddleBackQueue {\n\n    init() {\n        \n    }\n    \n    func pushFront(_ val: Int) {\n        \n    }\n    \n    func pushMiddle(_ val: Int) {\n        \n    }\n    \n    func pushBack(_ val: Int) {\n        \n    }\n    \n    func popFront() -> Int {\n        \n    }\n    \n    func popMiddle() -> Int {\n        \n    }\n    \n    func popBack() -> Int {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * let obj = FrontMiddleBackQueue()\n * obj.pushFront(val)\n * obj.pushMiddle(val)\n * obj.pushBack(val)\n * let ret_4: Int = obj.popFront()\n * let ret_5: Int = obj.popMiddle()\n * let ret_6: Int = obj.popBack()\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Rust",
                    "langSlug": "rust",
                    "code": "struct FrontMiddleBackQueue {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl FrontMiddleBackQueue {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn push_front(&self, val: i32) {\n        \n    }\n    \n    fn push_middle(&self, val: i32) {\n        \n    }\n    \n    fn push_back(&self, val: i32) {\n        \n    }\n    \n    fn pop_front(&self) -> i32 {\n        \n    }\n    \n    fn pop_middle(&self) -> i32 {\n        \n    }\n    \n    fn pop_back(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * let obj = FrontMiddleBackQueue::new();\n * obj.push_front(val);\n * obj.push_middle(val);\n * obj.push_back(val);\n * let ret_4: i32 = obj.pop_front();\n * let ret_5: i32 = obj.pop_middle();\n * let ret_6: i32 = obj.pop_back();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Ruby",
                    "langSlug": "ruby",
                    "code": "class FrontMiddleBackQueue\n    def initialize()\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def push_front(val)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def push_middle(val)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def push_back(val)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop_front()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop_middle()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop_back()\n        \n    end\n\n\nend\n\n# Your FrontMiddleBackQueue object will be instantiated and called as such:\n# obj = FrontMiddleBackQueue.new()\n# obj.push_front(val)\n# obj.push_middle(val)\n# obj.push_back(val)\n# param_4 = obj.pop_front()\n# param_5 = obj.pop_middle()\n# param_6 = obj.pop_back()",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "PHP",
                    "langSlug": "php",
                    "code": "class FrontMiddleBackQueue {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function pushFront($val) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function pushMiddle($val) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function pushBack($val) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function popFront() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function popMiddle() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function popBack() {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * $obj = FrontMiddleBackQueue();\n * $obj->pushFront($val);\n * $obj->pushMiddle($val);\n * $obj->pushBack($val);\n * $ret_4 = $obj->popFront();\n * $ret_5 = $obj->popMiddle();\n * $ret_6 = $obj->popBack();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Dart",
                    "langSlug": "dart",
                    "code": "class FrontMiddleBackQueue {\n\n  FrontMiddleBackQueue() {\n    \n  }\n  \n  void pushFront(int val) {\n    \n  }\n  \n  void pushMiddle(int val) {\n    \n  }\n  \n  void pushBack(int val) {\n    \n  }\n  \n  int popFront() {\n    \n  }\n  \n  int popMiddle() {\n    \n  }\n  \n  int popBack() {\n    \n  }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * FrontMiddleBackQueue obj = FrontMiddleBackQueue();\n * obj.pushFront(val);\n * obj.pushMiddle(val);\n * obj.pushBack(val);\n * int param4 = obj.popFront();\n * int param5 = obj.popMiddle();\n * int param6 = obj.popBack();\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Scala",
                    "langSlug": "scala",
                    "code": "class FrontMiddleBackQueue() {\n\n    def pushFront(`val`: Int): Unit = {\n        \n    }\n\n    def pushMiddle(`val`: Int): Unit = {\n        \n    }\n\n    def pushBack(`val`: Int): Unit = {\n        \n    }\n\n    def popFront(): Int = {\n        \n    }\n\n    def popMiddle(): Int = {\n        \n    }\n\n    def popBack(): Int = {\n        \n    }\n\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * val obj = new FrontMiddleBackQueue()\n * obj.pushFront(`val`)\n * obj.pushMiddle(`val`)\n * obj.pushBack(`val`)\n * val param_4 = obj.popFront()\n * val param_5 = obj.popMiddle()\n * val param_6 = obj.popBack()\n */",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Elixir",
                    "langSlug": "elixir",
                    "code": "defmodule FrontMiddleBackQueue do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec push_front(val :: integer) :: any\n  def push_front(val) do\n    \n  end\n\n  @spec push_middle(val :: integer) :: any\n  def push_middle(val) do\n    \n  end\n\n  @spec push_back(val :: integer) :: any\n  def push_back(val) do\n    \n  end\n\n  @spec pop_front() :: integer\n  def pop_front() do\n    \n  end\n\n  @spec pop_middle() :: integer\n  def pop_middle() do\n    \n  end\n\n  @spec pop_back() :: integer\n  def pop_back() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# FrontMiddleBackQueue.init_()\n# FrontMiddleBackQueue.push_front(val)\n# FrontMiddleBackQueue.push_middle(val)\n# FrontMiddleBackQueue.push_back(val)\n# param_4 = FrontMiddleBackQueue.pop_front()\n# param_5 = FrontMiddleBackQueue.pop_middle()\n# param_6 = FrontMiddleBackQueue.pop_back()\n\n# FrontMiddleBackQueue.init_ will be called before every test case, in which you can do some necessary initializations.",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Erlang",
                    "langSlug": "erlang",
                    "code": "-spec front_middle_back_queue_init_() -> any().\nfront_middle_back_queue_init_() ->\n  .\n\n-spec front_middle_back_queue_push_front(Val :: integer()) -> any().\nfront_middle_back_queue_push_front(Val) ->\n  .\n\n-spec front_middle_back_queue_push_middle(Val :: integer()) -> any().\nfront_middle_back_queue_push_middle(Val) ->\n  .\n\n-spec front_middle_back_queue_push_back(Val :: integer()) -> any().\nfront_middle_back_queue_push_back(Val) ->\n  .\n\n-spec front_middle_back_queue_pop_front() -> integer().\nfront_middle_back_queue_pop_front() ->\n  .\n\n-spec front_middle_back_queue_pop_middle() -> integer().\nfront_middle_back_queue_pop_middle() ->\n  .\n\n-spec front_middle_back_queue_pop_back() -> integer().\nfront_middle_back_queue_pop_back() ->\n  .\n\n\n%% Your functions will be called as such:\n%% front_middle_back_queue_init_(),\n%% front_middle_back_queue_push_front(Val),\n%% front_middle_back_queue_push_middle(Val),\n%% front_middle_back_queue_push_back(Val),\n%% Param_4 = front_middle_back_queue_pop_front(),\n%% Param_5 = front_middle_back_queue_pop_middle(),\n%% Param_6 = front_middle_back_queue_pop_back(),\n\n%% front_middle_back_queue_init_ will be called before every test case, in which you can do some necessary initializations.",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Racket",
                    "langSlug": "racket",
                    "code": "(define front-middle-back-queue%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; push-front : exact-integer? -> void?\n    (define/public (push-front val)\n      )\n    ; push-middle : exact-integer? -> void?\n    (define/public (push-middle val)\n      )\n    ; push-back : exact-integer? -> void?\n    (define/public (push-back val)\n      )\n    ; pop-front : -> exact-integer?\n    (define/public (pop-front)\n      )\n    ; pop-middle : -> exact-integer?\n    (define/public (pop-middle)\n      )\n    ; pop-back : -> exact-integer?\n    (define/public (pop-back)\n      )))\n\n;; Your front-middle-back-queue% object will be instantiated and called as such:\n;; (define obj (new front-middle-back-queue%))\n;; (send obj push-front val)\n;; (send obj push-middle val)\n;; (send obj push-back val)\n;; (define param_4 (send obj pop-front))\n;; (define param_5 (send obj pop-middle))\n;; (define param_6 (send obj pop-back))",
                    "__typename": "CodeSnippetNode"
                },
                {
                    "lang": "Cangjie",
                    "langSlug": "cangjie",
                    "code": "class FrontMiddleBackQueue {\n    init() {\n\n    }\n    \n    func pushFront(val: Int64): Unit {\n\n    }\n    \n    func pushMiddle(val: Int64): Unit {\n\n    }\n    \n    func pushBack(val: Int64): Unit {\n\n    }\n    \n    func popFront(): Int64 {\n\n    }\n    \n    func popMiddle(): Int64 {\n\n    }\n    \n    func popBack(): Int64 {\n\n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * let obj: FrontMiddleBackQueue = FrontMiddleBackQueue()\n * obj.pushFront(val)\n * obj.pushMiddle(val)\n * obj.pushBack(val)\n * let param_4 = obj.popFront()\n * let param_5 = obj.popMiddle()\n * let param_6 = obj.popBack()\n */",
                    "__typename": "CodeSnippetNode"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.7K\", \"totalSubmission\": \"44.4K\", \"totalAcceptedRaw\": 26724, \"totalSubmissionRaw\": 44353, \"acRate\": \"60.3%\"}",
            "hints": [
                "The constraints are low enough for a brute force, single array approach.",
                "For an O(1) per method approach, use 2 double-ended queues: one for the first half and one for the second half."
            ],
            "solution": null,
            "status": null,
            "sampleTestCase": "[\"FrontMiddleBackQueue\",\"pushFront\",\"pushBack\",\"pushMiddle\",\"pushMiddle\",\"popFront\",\"popMiddle\",\"popMiddle\",\"popBack\",\"popFront\"]\n[[],[1],[2],[3],[4],[],[],[],[],[]]",
            "metaData": "{\n  \"classname\": \"FrontMiddleBackQueue\",\n  \"constructor\": {\n    \"params\": []\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"val\"\n        }\n      ],\n      \"name\": \"pushFront\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"val\"\n        }\n      ],\n      \"name\": \"pushMiddle\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"val\"\n        }\n      ],\n      \"name\": \"pushBack\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [],\n      \"name\": \"popFront\",\n      \"return\": {\n        \"type\": \"integer\"\n      }\n    },\n    {\n      \"params\": [],\n      \"name\": \"popMiddle\",\n      \"return\": {\n        \"type\": \"integer\"\n      }\n    },\n    {\n      \"params\": [],\n      \"name\": \"popBack\",\n      \"return\": {\n        \"type\": \"integer\"\n      }\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"systemdesign\": true\n}",
            "judgerAvailable": true,
            "judgeType": "large",
            "mysqlSchemas": [],
            "enableRunCode": true,
            "envInfo": "{\"cpp\":[\"C++\",\"<p>\\u7248\\u672c\\uff1a<code>clang 19<\\/code> \\u91c7\\u7528\\u6700\\u65b0 C++ 23 \\u6807\\u51c6\\uff0c\\u5e76\\u4f7f\\u7528 GCC 14 \\u63d0\\u4f9b\\u7684 <code>libstdc++<\\/code>\\u3002<\\/p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u5c06\\u4f1a\\u91c7\\u7528 <code>-O2<\\/code> \\u7ea7\\u4f18\\u5316\\uff0c\\u5e76\\u63d0\\u4f9b <code>-gline-tables-only<\\/code> \\u53c2\\u6570\\u3002<a href=\\\"https:\\/\\/github.com\\/google\\/sanitizers\\/wiki\\/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer<\\/a> \\u4e5f\\u88ab\\u5f00\\u542f\\u6765\\u68c0\\u6d4b <code>out-of-bounds<\\/code> \\u548c <code>use-after-free<\\/code> \\u9519\\u8bef\\u3002<\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u4f7f\\u7528\\u65b9\\u4fbf\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8\\u5bfc\\u5165\\u3002<\\/p>\"],\"java\":[\"Java\",\"<p>\\u7248\\u672c\\uff1a<code>OpenJDK 21<\\/code>\\u3002\\u4f7f\\u7528\\u7f16\\u8bd1\\u53c2\\u6570 <code>--enable-preview --release 21<\\/code><\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u88ab\\u5bfc\\u5165\\u3002<\\/p>\\r\\n\\r\\n<p>\\u5305\\u542b Pair \\u7c7b: https:\\/\\/docs.oracle.com\\/javase\\/8\\/javafx\\/api\\/javafx\\/util\\/Pair.html <\\/p>\"],\"python\":[\"Python\",\"<p>\\u7248\\u672c\\uff1a <code>Python 2.7.18<\\/code><\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982\\uff1a<a href=\\\"https:\\/\\/docs.python.org\\/2\\/library\\/array.html\\\" target=\\\"_blank\\\">array<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/2\\/library\\/bisect.html\\\" target=\\\"_blank\\\">bisect<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/2\\/library\\/collections.html\\\" target=\\\"_blank\\\">collections<\\/a>\\u3002\\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002<\\/p>\\r\\n\\r\\n<p>\\u6ce8\\u610f Python 2.7 <a href=\\\"https:\\/\\/www.python.org\\/dev\\/peps\\/pep-0373\\/\\\" target=\\\"_blank\\\">\\u5df2\\u4e0d\\u518d\\u7ef4\\u62a4<\\/a>\\u3002 \\u5982\\u60f3\\u4f7f\\u7528\\u6700\\u65b0\\u7248\\u7684Python\\uff0c\\u8bf7\\u9009\\u62e9Python 3\\u3002<\\/p>\"],\"c\":[\"C\",\"<p>\\u7248\\u672c\\uff1a<code>GCC 14<\\/code>\\uff0c\\u91c7\\u7528 GNU11 \\u6807\\u51c6\\u3002<\\/p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u5c06\\u4f1a\\u91c7\\u7528 <code>-O2<\\/code> \\u7ea7\\u4f18\\u5316\\uff0c\\u5e76\\u63d0\\u4f9b <code>-g1<\\/code> \\u53c2\\u6570\\u3002 <a href=\\\"https:\\/\\/github.com\\/google\\/sanitizers\\/wiki\\/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer<\\/a> \\u4e5f\\u88ab\\u5f00\\u542f\\u6765\\u68c0\\u6d4b <code>out-of-bounds<\\/code> \\u548c <code>use-after-free<\\/code> \\u9519\\u8bef\\u3002<\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u4f7f\\u7528\\u65b9\\u4fbf\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8\\u5bfc\\u5165\\u3002<\\/p>\\r\\n\\r\\n<p>\\u5982\\u60f3\\u4f7f\\u7528\\u54c8\\u5e0c\\u8868\\u8fd0\\u7b97, \\u60a8\\u53ef\\u4ee5\\u4f7f\\u7528 <a href=\\\"https:\\/\\/troydhanson.github.io\\/uthash\\/\\\" target=\\\"_blank\\\">uthash<\\/a>\\u3002 \\\"uthash.h\\\"\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5bfc\\u5165\\u3002\\u8bf7\\u770b\\u5982\\u4e0b\\u793a\\u4f8b:<\\/p>\\r\\n\\r\\n<p><b>1. \\u5f80\\u54c8\\u5e0c\\u8868\\u4e2d\\u6dfb\\u52a0\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a<\\/b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            \\/* we'll use this field as the key *\\/\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; \\/* makes this structure hashable *\\/\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n<\\/pre>\\r\\n<\\/p>\\r\\n\\r\\n<p><b>2. \\u5728\\u54c8\\u5e0c\\u8868\\u4e2d\\u67e5\\u627e\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a<\\/b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n<\\/pre>\\r\\n<\\/p>\\r\\n\\r\\n<p><b>3. \\u4ece\\u54c8\\u5e0c\\u8868\\u4e2d\\u5220\\u9664\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a<\\/b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n<\\/pre>\\r\\n<\\/p>\"],\"csharp\":[\"C#\",\"<p><a href=\\\"https:\\/\\/learn.microsoft.com\\/en-us\\/dotnet\\/csharp\\/whats-new\\/csharp-13\\\" target=\\\"_blank\\\">C# 13<\\/a> \\u8fd0\\u884c\\u5728 .NET 9 \\u4e0a<\\/p>\"],\"javascript\":[\"JavaScript\",\"<p>\\u7248\\u672c\\uff1a<code>Node.js 22.14.0<\\/code><\\/p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u6267\\u884c\\u65f6\\u5c06\\u5e26\\u4e0a <code>--harmony<\\/code> \\u6807\\u8bb0\\u6765\\u5f00\\u542f <a href=\\\"http:\\/\\/node.green\\/\\\" target=\\\"_blank\\\">\\u65b0\\u7248ES6\\u7279\\u6027<\\/a>\\u3002<\\/p>\\r\\n\\r\\n<p><a href=\\\"https:\\/\\/lodash.com\\\" target=\\\"_blank\\\">lodash.js<\\/a> \\u5e93\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5305\\u542b\\u3002<\\/p>\\r\\n\\r\\n<p> \\u60a8\\u53ef\\u4f7f\\u7528 <a href=\\\"https:\\/\\/datastructures-js.info\\/docs\\\" target=\\\"_blank\\\"> datastructures-js <\\/a>\\u5e93\\u6240\\u63d0\\u4f9b\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u3002<\\/p>\"],\"ruby\":[\"Ruby\",\"<p>\\u4f7f\\u7528 <code>Ruby 3.2<\\/code> \\u6267\\u884c<\\/p>\\r\\n\\r\\n<p>\\u4e00\\u4e9b\\u5e38\\u7528\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u5df2\\u5728 Algorithms \\u6a21\\u5757\\u4e2d\\u63d0\\u4f9b\\uff1ahttps:\\/\\/www.rubydoc.info\\/github\\/kanwei\\/algorithms\\/Algorithms<\\/p>\"],\"swift\":[\"Swift\",\"<p>\\u7248\\u672c\\uff1a<code>Swift 6.0<\\/code><\\/p>\\r\\n\\r\\n<p>\\u60a8\\u53ef\\u4ee5\\u4f7f\\u7528 <a href=\\\"https:\\/\\/github.com\\/apple\\/swift-algorithms\\/tree\\/1.2.0\\\" target=\\\"_blank\\\">swift-algorithms 1.2.0<\\/a>\\uff0c<a href=\\\"https:\\/\\/github.com\\/apple\\/swift-collections\\/tree\\/1.1.4\\\" target=\\\"_blank\\\">swift-collections 1.1.4<\\/a> \\u548c <a href=\\\"https:\\/\\/github.com\\/apple\\/swift-numerics\\/tree\\/1.0.2\\\" target=\\\"_blank\\\">swift-numerics 1.0.2<\\/a><\\/p>\\r\\n\\r\\n<p>\\u6211\\u4eec\\u901a\\u5e38\\u4fdd\\u8bc1\\u66f4\\u65b0\\u5230 <a href=\\\"https:\\/\\/swift.org\\/download\\/\\\" target=\\\"_blank\\\">Apple\\u653e\\u51fa\\u7684\\u6700\\u65b0\\u7248Swift<\\/a>\\u3002\\u5982\\u679c\\u60a8\\u53d1\\u73b0Swift\\u4e0d\\u662f\\u6700\\u65b0\\u7248\\u7684\\uff0c\\u8bf7\\u8054\\u7cfb\\u6211\\u4eec\\uff01\\u6211\\u4eec\\u5c06\\u5c3d\\u5feb\\u66f4\\u65b0\\u3002<\\/p>\"],\"golang\":[\"Go\",\"<p>\\u7248\\u672c\\uff1a<code>Go 1.23<\\/code><\\/p>\\r\\n\\r\\n<p>\\u652f\\u6301 <a href=\\\"https:\\/\\/pkg.go.dev\\/github.com\\/emirpasic\\/gods@v1.18.1\\\" target=\\\"_blank\\\">https:\\/\\/pkg.go.dev\\/github.com\\/emirpasic\\/gods@v1.18.1<\\/a> \\u548c <a href=\\\"https:\\/\\/pkg.go.dev\\/github.com\\/emirpasic\\/gods\\/v2@v2.0.0-alpha\\\" target=\\\"_blank\\\">https:\\/\\/pkg.go.dev\\/github.com\\/emirpasic\\/gods\\/v2@v2.0.0-alpha<\\/a> \\u7b2c\\u4e09\\u65b9\\u5e93\\u3002<\\/p>\"],\"python3\":[\"Python3\",\"<p>\\u7248\\u672c\\uff1a<code>Python 3.11<\\/code><\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982<a href=\\\"https:\\/\\/docs.python.org\\/3\\/library\\/array.html\\\" target=\\\"_blank\\\">array<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/3\\/library\\/bisect.html\\\" target=\\\"_blank\\\">bisect<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/3\\/library\\/collections.html\\\" target=\\\"_blank\\\">collections<\\/a>\\u3002 \\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002<\\/p>\\r\\n\\r\\n<p>\\u5982\\u9700\\u4f7f\\u7528 Map\\/TreeMap \\u6570\\u636e\\u7ed3\\u6784\\uff0c\\u60a8\\u53ef\\u4f7f\\u7528 <a href=\\\"http:\\/\\/www.grantjenks.com\\/docs\\/sortedcontainers\\/\\\" target=\\\"_blank\\\">sortedcontainers<\\/a> \\u5e93\\u3002<\\/p>\"],\"scala\":[\"Scala\",\"<p>\\u7248\\u672c\\uff1a<code>Scala 3.3.1<\\/code><\\/p>\"],\"kotlin\":[\"Kotlin\",\"<p>\\u7248\\u672c\\uff1a<code>Kotlin 2.1.10<\\/code><\\/p>\"],\"rust\":[\"Rust\",\"<p>\\u7248\\u672c\\uff1a<code>rust 1.88.0<\\/code>\\uff0c\\u4f7f\\u7528 edition 2024\\u3002<\\/p>\\r\\n\\r\\n<p>\\u652f\\u6301 crates.io \\u7684 <a href=\\\"https:\\/\\/crates.io\\/crates\\/rand\\\" target=\\\"_blank\\\">rand<\\/a>\\u3001<a href=\\\"https:\\/\\/crates.io\\/crates\\/regex\\\" target=\\\"_blank\\\">regex<\\/a> \\u548c <a href=\\\"https:\\/\\/crates.io\\/crates\\/itertools\\\" target=\\\"_blank\\\">itertools<\\/a><\\/p>\"],\"php\":[\"PHP\",\"<p><code>PHP 8.2<\\/code>.<\\/p>\\r\\n\\r\\n<p>With bcmath module.<\\/p>\"],\"typescript\":[\"TypeScript\",\"<p>TypeScript 5.7.3<\\/p>\\r\\n\\r\\n<p>Compile Options: --alwaysStrict --strictBindCallApply --strictFunctionTypes --target ES2024<\\/p>\\r\\n\\r\\n<p><a href=\\\"https:\\/\\/lodash.com\\\" target=\\\"_blank\\\">lodash.js<\\/a> \\u5e93\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5305\\u542b\\u3002<\\/p>\\r\\n\\r\\n<p> \\u60a8\\u53ef\\u4f7f\\u7528 <a href=\\\"https:\\/\\/datastructures-js.info\\/docs\\\" target=\\\"_blank\\\"> datastructures-js <\\/a>\\u5e93\\u6240\\u63d0\\u4f9b\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u3002<\\/p>\"],\"racket\":[\"Racket\",\"<p><a href=\\\"https:\\/\\/docs.racket-lang.org\\/guide\\/performance.html#%28tech._c%29\\\" target=\\\"_blank\\\">Racket CS<\\/a> v8.15<\\/p>\\r\\n\\r\\n<p>\\u4f7f\\u7528 #lang racket<\\/p>\\r\\n\\r\\n<p>\\u5df2\\u9884\\u5148 (require data\\/gvector data\\/queue data\\/order data\\/heap). \\u82e5\\u9700\\u4f7f\\u7528\\u5176\\u5b83\\u6570\\u636e\\u7ed3\\u6784\\uff0c\\u53ef\\u81ea\\u884c require\\u3002<\\/p>\"],\"erlang\":[\"Erlang\",\"Erlang\\/OTP 26\"],\"elixir\":[\"Elixir\",\"Elixir 1.17 with Erlang\\/OTP 26\"],\"dart\":[\"Dart\",\"<p>Dart 3.2\\u3002\\u60a8\\u53ef\\u4ee5\\u4f7f\\u7528 <a href=\\\"https:\\/\\/pub.dev\\/packages\\/collection\\/versions\\/1.18.0\\\" target=\\\"_blank\\\">collection<\\/a> \\u5305<\\/p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5c06\\u4f1a\\u88ab\\u4e0d\\u7f16\\u8bd1\\u76f4\\u63a5\\u8fd0\\u884c<\\/p>\"],\"cangjie\":[\"Cangjie\",\"<p>\\u7248\\u672c\\uff1a1.0.0 LTS (cjnative)<\\/p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u53c2\\u6570\\uff1a<code>-O2 --disable-reflection<\\/code><\\/p>\\r\\n\\r\\n<p>\\u5feb\\u901f\\u5165\\u95e8\\u8bf7\\u67e5\\u9605<a href=\\\"https:\\/\\/leetcode.cn\\/leetbook\\/detail\\/cangjie\\/\\\" target=\\\"_blank\\\">\\u300c\\u4ed3\\u9889\\u7f16\\u7a0b\\u8bed\\u8a00\\u5f00\\u53d1\\u6307\\u5357\\u300d<\\/a><\\/p>\"]}",
            "book": null,
            "isSubscribed": false,
            "isDailyQuestion": false,
            "dailyRecordStatus": null,
            "editorType": "CKEDITOR",
            "ugcQuestionId": null,
            "style": "LEETCODE",
            "exampleTestcases": "[\"FrontMiddleBackQueue\",\"pushFront\",\"pushBack\",\"pushMiddle\",\"pushMiddle\",\"popFront\",\"popMiddle\",\"popMiddle\",\"popBack\",\"popFront\"]\n[[],[1],[2],[3],[4],[],[],[],[],[]]",
            "__typename": "QuestionNode"
        }
    }
}